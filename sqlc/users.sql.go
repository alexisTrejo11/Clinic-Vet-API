// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"

	"clinic-vet-api/db/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const countActiveUsers = `-- name: CountActiveUsers :one
SELECT COUNT(*)
FROM users
WHERE status = 'active' 
AND deleted_at IS NULL
`

func (q *Queries) CountActiveUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllUsers = `-- name: CountAllUsers :one
SELECT COUNT(*)
FROM users
WHERE deleted_at IS NULL
`

func (q *Queries) CountAllUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByRole = `-- name: CountUsersByRole :one
SELECT COUNT(*)
FROM users
WHERE role = $1
AND deleted_at IS NULL
`

func (q *Queries) CountUsersByRole(ctx context.Context, role models.UserRole) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByRole, role)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByStatus = `-- name: CountUsersByStatus :one
SELECT COUNT(*)
FROM users
WHERE status = $1
AND deleted_at IS NULL
`

func (q *Queries) CountUsersByStatus(ctx context.Context, status models.UserStatus) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, 
    phone_number, 
    password, 
    status, 
    role, 
    created_at,
    updated_at
)
VALUES (
    $1, $2, $3, $4, $5,
    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, email, phone_number, password, status, role, last_login, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email       pgtype.Text
	PhoneNumber pgtype.Text
	Password    pgtype.Text
	Status      models.UserStatus
	Role        models.UserRole
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PhoneNumber,
		arg.Password,
		arg.Status,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const existsUserByCustomerID = `-- name: ExistsUserByCustomerID :one
SELECT COUNT(*) > 0
FROM customers
WHERE id = $1
AND deleted_at IS NULL
`

func (q *Queries) ExistsUserByCustomerID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByCustomerID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existsUserByEmail = `-- name: ExistsUserByEmail :one
SELECT COUNT(*) > 0
FROM users
WHERE email = $1
`

func (q *Queries) ExistsUserByEmail(ctx context.Context, email pgtype.Text) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByEmail, email)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existsUserByEmployeeID = `-- name: ExistsUserByEmployeeID :one
SELECT COUNT(*) > 0
FROM employees
WHERE id = $1
AND deleted_at IS NULL
`

func (q *Queries) ExistsUserByEmployeeID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByEmployeeID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existsUserByID = `-- name: ExistsUserByID :one
SELECT COUNT(*) > 0
FROM users
WHERE id = $1
`

func (q *Queries) ExistsUserByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existsUserByPhoneNumber = `-- name: ExistsUserByPhoneNumber :one
SELECT COUNT(*) > 0
FROM users
WHERE phone_number = $1
`

func (q *Queries) ExistsUserByPhoneNumber(ctx context.Context, phoneNumber pgtype.Text) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByPhoneNumber, phoneNumber)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findActiveUsers = `-- name: FindActiveUsers :many
SELECT id, email, phone_number, password, status, role, last_login, created_at, updated_at, deleted_at
FROM users
WHERE status = 'active'
AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FindActiveUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindActiveUsers(ctx context.Context, arg FindActiveUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findActiveUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.Status,
			&i.Role,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllUsers = `-- name: FindAllUsers :many
SELECT id, email, phone_number, password, status, role, last_login, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FindAllUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindAllUsers(ctx context.Context, arg FindAllUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.Status,
			&i.Role,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findInactiveUsers = `-- name: FindInactiveUsers :many
SELECT id, email, phone_number, password, status, role, last_login, created_at, updated_at, deleted_at
FROM users
WHERE status != 'active'
AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FindInactiveUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindInactiveUsers(ctx context.Context, arg FindInactiveUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findInactiveUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.Status,
			&i.Role,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRecentlyLoggedInUsers = `-- name: FindRecentlyLoggedInUsers :many
SELECT id, email, phone_number, password, status, role, last_login, created_at, updated_at, deleted_at
FROM users
WHERE last_login >= $1
AND deleted_at IS NULL
ORDER BY last_login DESC
LIMIT $2 OFFSET $3
`

type FindRecentlyLoggedInUsersParams struct {
	LastLogin pgtype.Timestamptz
	Limit     int32
	Offset    int32
}

func (q *Queries) FindRecentlyLoggedInUsers(ctx context.Context, arg FindRecentlyLoggedInUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findRecentlyLoggedInUsers, arg.LastLogin, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.Status,
			&i.Role,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByCustomerID = `-- name: FindUserByCustomerID :one
SELECT u.id, u.email, u.phone_number, u.password, u.status, u.role, u.last_login, u.created_at, u.updated_at, u.deleted_at
FROM users u
INNER JOIN customers c ON u.id = c.user_id
WHERE c.id = $1
AND u.deleted_at IS NULL
`

func (q *Queries) FindUserByCustomerID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUserByCustomerID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT 
    u.id, u.email, u.phone_number, u.password, u.status, u.role, u.last_login, u.created_at, u.updated_at, u.deleted_at,
    c.id as customer_id,
    e.id as employee_id,
    CASE 
        WHEN c.id IS NOT NULL THEN 'customer'
        WHEN e.id IS NOT NULL THEN 'employee'
        ELSE 'user'
    END as user_type
FROM users u
LEFT JOIN customers c ON u.id = c.user_id AND c.deleted_at IS NULL
LEFT JOIN employees e ON u.id = e.user_id AND e.deleted_at IS NULL
WHERE u.email = $1
AND u.deleted_at IS NULL
`

type FindUserByEmailRow struct {
	ID          int32
	Email       pgtype.Text
	PhoneNumber pgtype.Text
	Password    pgtype.Text
	Status      models.UserStatus
	Role        models.UserRole
	LastLogin   pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamp
	CustomerID  pgtype.Int4
	EmployeeID  pgtype.Int4
	UserType    string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email pgtype.Text) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CustomerID,
		&i.EmployeeID,
		&i.UserType,
	)
	return i, err
}

const findUserByEmployeeID = `-- name: FindUserByEmployeeID :one
SELECT u.id, u.email, u.phone_number, u.password, u.status, u.role, u.last_login, u.created_at, u.updated_at, u.deleted_at
FROM users u
INNER JOIN employees e ON u.id = e.user_id
WHERE e.id = $1
AND u.deleted_at IS NULL
`

func (q *Queries) FindUserByEmployeeID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmployeeID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT 
    u.id, u.email, u.phone_number, u.password, u.status, u.role, u.last_login, u.created_at, u.updated_at, u.deleted_at,
    c.id as customer_id,
    e.id as employee_id,
    CASE 
        WHEN c.id IS NOT NULL THEN 'customer'
        WHEN e.id IS NOT NULL THEN 'employee'
        ELSE 'user'
    END as user_type
FROM users u
LEFT JOIN customers c ON u.id = c.user_id AND c.deleted_at IS NULL
LEFT JOIN employees e ON u.id = e.user_id AND e.deleted_at IS NULL
WHERE u.id = $1 
AND u.deleted_at IS NULL
`

type FindUserByIDRow struct {
	ID          int32
	Email       pgtype.Text
	PhoneNumber pgtype.Text
	Password    pgtype.Text
	Status      models.UserStatus
	Role        models.UserRole
	LastLogin   pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamp
	CustomerID  pgtype.Int4
	EmployeeID  pgtype.Int4
	UserType    string
}

func (q *Queries) FindUserByID(ctx context.Context, id int32) (FindUserByIDRow, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i FindUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CustomerID,
		&i.EmployeeID,
		&i.UserType,
	)
	return i, err
}

const findUserByPhoneNumber = `-- name: FindUserByPhoneNumber :one
SELECT 
    u.id, u.email, u.phone_number, u.password, u.status, u.role, u.last_login, u.created_at, u.updated_at, u.deleted_at,
    c.id as customer_id,
    e.id as employee_id,
    CASE 
        WHEN c.id IS NOT NULL THEN 'customer'
        WHEN e.id IS NOT NULL THEN 'employee'
        ELSE 'user'
    END as user_type
FROM users u
LEFT JOIN customers c ON u.id = c.user_id AND c.deleted_at IS NULL
LEFT JOIN employees e ON u.id = e.user_id AND e.deleted_at IS NULL
WHERE u.phone_number = $1
AND u.deleted_at IS NULL
`

type FindUserByPhoneNumberRow struct {
	ID          int32
	Email       pgtype.Text
	PhoneNumber pgtype.Text
	Password    pgtype.Text
	Status      models.UserStatus
	Role        models.UserRole
	LastLogin   pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamp
	CustomerID  pgtype.Int4
	EmployeeID  pgtype.Int4
	UserType    string
}

func (q *Queries) FindUserByPhoneNumber(ctx context.Context, phoneNumber pgtype.Text) (FindUserByPhoneNumberRow, error) {
	row := q.db.QueryRow(ctx, findUserByPhoneNumber, phoneNumber)
	var i FindUserByPhoneNumberRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CustomerID,
		&i.EmployeeID,
		&i.UserType,
	)
	return i, err
}

const findUsersByRole = `-- name: FindUsersByRole :many
SELECT id, email, phone_number, password, status, role, last_login, created_at, updated_at, deleted_at
FROM users
WHERE role = $1
AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type FindUsersByRoleParams struct {
	Role   models.UserRole
	Limit  int32
	Offset int32
}

func (q *Queries) FindUsersByRole(ctx context.Context, arg FindUsersByRoleParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findUsersByRole, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.Status,
			&i.Role,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerIDByUserID = `-- name: GetCustomerIDByUserID :one
SELECT c.id
FROM customers c
WHERE c.user_id = $1
AND c.deleted_at IS NULL
`

func (q *Queries) GetCustomerIDByUserID(ctx context.Context, userID pgtype.Int4) (int32, error) {
	row := q.db.QueryRow(ctx, getCustomerIDByUserID, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getEmployeeIDByUserID = `-- name: GetEmployeeIDByUserID :one
SELECT e.id
FROM employees e
WHERE e.user_id = $1
AND e.deleted_at IS NULL
`

func (q *Queries) GetEmployeeIDByUserID(ctx context.Context, userID pgtype.Int4) (int32, error) {
	row := q.db.QueryRow(ctx, getEmployeeIDByUserID, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserCustomerProfile = `-- name: GetUserCustomerProfile :one
SELECT u.id, u.email, u.phone_number, u.password, u.status, u.role, u.last_login, u.created_at, u.updated_at, u.deleted_at, c.id, c.first_name, c.last_name, c.photo, c.date_of_birth, c.gender, c.user_id, c.is_active, c.created_at, c.updated_at, c.deleted_at
FROM users u
JOIN customers c ON u.id = c.user_id
WHERE u.id = $1
AND u.deleted_at IS NULL
`

type GetUserCustomerProfileRow struct {
	ID          int32
	Email       pgtype.Text
	PhoneNumber pgtype.Text
	Password    pgtype.Text
	Status      models.UserStatus
	Role        models.UserRole
	LastLogin   pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamp
	ID_2        int32
	FirstName   string
	LastName    string
	Photo       string
	DateOfBirth pgtype.Date
	Gender      models.PersonGender
	UserID      pgtype.Int4
	IsActive    bool
	CreatedAt_2 pgtype.Timestamp
	UpdatedAt_2 pgtype.Timestamp
	DeletedAt_2 pgtype.Timestamp
}

func (q *Queries) GetUserCustomerProfile(ctx context.Context, id int32) (GetUserCustomerProfileRow, error) {
	row := q.db.QueryRow(ctx, getUserCustomerProfile, id)
	var i GetUserCustomerProfileRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.DateOfBirth,
		&i.Gender,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const getUserEmployeeProfile = `-- name: GetUserEmployeeProfile :one
SELECT u.id, u.email, u.phone_number, u.password, u.status, u.role, u.last_login, u.created_at, u.updated_at, u.deleted_at, e.id, e.first_name, e.last_name, e.gender, e.date_of_birth, e.photo, e.license_number, e.speciality, e.years_of_experience, e.is_active, e.user_id, e.schedule_json, e.created_at, e.updated_at, e.deleted_at
FROM users u
JOIN employees e ON u.id = e.user_id
WHERE u.id = $1
AND u.deleted_at IS NULL
`

type GetUserEmployeeProfileRow struct {
	ID                int32
	Email             pgtype.Text
	PhoneNumber       pgtype.Text
	Password          pgtype.Text
	Status            models.UserStatus
	Role              models.UserRole
	LastLogin         pgtype.Timestamptz
	CreatedAt         pgtype.Timestamptz
	UpdatedAt         pgtype.Timestamptz
	DeletedAt         pgtype.Timestamp
	ID_2              int32
	FirstName         string
	LastName          string
	Gender            models.PersonGender
	DateOfBirth       pgtype.Date
	Photo             string
	LicenseNumber     string
	Speciality        models.VeterinarianSpeciality
	YearsOfExperience int32
	IsActive          bool
	UserID            pgtype.Int4
	ScheduleJson      []byte
	CreatedAt_2       pgtype.Timestamptz
	UpdatedAt_2       pgtype.Timestamptz
	DeletedAt_2       pgtype.Timestamp
}

func (q *Queries) GetUserEmployeeProfile(ctx context.Context, id int32) (GetUserEmployeeProfileRow, error) {
	row := q.db.QueryRow(ctx, getUserEmployeeProfile, id)
	var i GetUserEmployeeProfileRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.DateOfBirth,
		&i.Photo,
		&i.LicenseNumber,
		&i.Speciality,
		&i.YearsOfExperience,
		&i.IsActive,
		&i.UserID,
		&i.ScheduleJson,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, hardDeleteUser, id)
	return err
}

const restoreUser = `-- name: RestoreUser :exec
UPDATE users
SET deleted_at = NULL
WHERE id = $1
`

func (q *Queries) RestoreUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, restoreUser, id)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = $2,
    phone_number = $3,
    password = $4,
    status = $5,
    role = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, phone_number, password, status, role, last_login, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID          int32
	Email       pgtype.Text
	PhoneNumber pgtype.Text
	Password    pgtype.Text
	Status      models.UserStatus
	Role        models.UserRole
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.Password,
		arg.Status,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET last_login = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET 
    password = $2,
    updated_at = CURRENT_TIMESTAMP,
    password_changed_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int32
	Password pgtype.Text
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users
SET 
    status = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserStatusParams struct {
	ID     int32
	Status models.UserStatus
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserStatus, arg.ID, arg.Status)
	return err
}
