// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, 
    phone_number, 
    password, 
    status, 
    role, 
    profile_id,
    created_at,
    updated_at
)
VALUES (
    $1, $2, $3, $4, $5, $6,
    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, email, phone_number, password, status, role, profile_id, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email       pgtype.Text
	PhoneNumber pgtype.Text
	Password    pgtype.Text
	Status      UserStatus
	Role        UserRole
	ProfileID   pgtype.Int4
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PhoneNumber,
		arg.Password,
		arg.Status,
		arg.Role,
		arg.ProfileID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, phone_number, password, status, role, profile_id, created_at, updated_at, deleted_at
FROM users
WHERE email = $1
AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, phone_number, password, status, role, profile_id, created_at, updated_at, deleted_at
FROM users
WHERE id = $1 
AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, email, phone_number, password, status, role, profile_id, created_at, updated_at, deleted_at
FROM users
WHERE phone_number = $1
AND deleted_at IS NULL
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, hardDeleteUser, id)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, phone_number, password, status, role, profile_id, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.Status,
			&i.Role,
			&i.ProfileID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreUser = `-- name: RestoreUser :exec
UPDATE users
SET deleted_at = NULL
WHERE id = $1
`

func (q *Queries) RestoreUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, restoreUser, id)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = $2,
    phone_number = $3,
    password = $4,
    status = $5,
    role = $6,
    profile_id = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, phone_number, password, status, role, profile_id, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID          int32
	Email       pgtype.Text
	PhoneNumber pgtype.Text
	Password    pgtype.Text
	Status      UserStatus
	Role        UserRole
	ProfileID   pgtype.Int4
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.Password,
		arg.Status,
		arg.Role,
		arg.ProfileID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Status,
		&i.Role,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
