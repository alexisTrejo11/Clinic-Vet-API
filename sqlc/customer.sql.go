// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: customer.sql

package sqlc

import (
	"context"

	"clinic-vet-api/db/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateCustomer = `-- name: ActivateCustomer :exec
UPDATE customers
SET 
    is_active = true, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) ActivateCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, activateCustomer, id)
	return err
}

const countActiveCustomers = `-- name: CountActiveCustomers :one
SELECT COUNT(*)
FROM customers
WHERE is_active = TRUE AND deleted_at IS NULL
`

func (q *Queries) CountActiveCustomers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveCustomers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllCustomers = `-- name: CountAllCustomers :one
SELECT COUNT(*)
FROM customers
WHERE deleted_at IS NULL
`

func (q *Queries) CountAllCustomers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllCustomers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    photo, first_name, last_name, gender, 
    user_id, is_active, date_of_birth
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
`

type CreateCustomerParams struct {
	Photo       string
	FirstName   string
	LastName    string
	Gender      models.PersonGender
	UserID      pgtype.Int4
	IsActive    bool
	DateOfBirth pgtype.Date
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Photo,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.UserID,
		arg.IsActive,
		arg.DateOfBirth,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateCustomer = `-- name: DeactivateCustomer :exec
UPDATE customers
SET 
    is_active = false, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeactivateCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deactivateCustomer, id)
	return err
}

const existsCustomerByID = `-- name: ExistsCustomerByID :one
SELECT COUNT(*) > 0
FROM customers
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) ExistsCustomerByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsCustomerByID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findActiveCustomers = `-- name: FindActiveCustomers :many
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM customers
WHERE is_active = TRUE AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FindActiveCustomersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindActiveCustomers(ctx context.Context, arg FindActiveCustomersParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, findActiveCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Photo,
			&i.PhoneNumber,
			&i.DateOfBirth,
			&i.Gender,
			&i.Address,
			&i.UserID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCustomerByID = `-- name: FindCustomerByID :one
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM customers
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) FindCustomerByID(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRow(ctx, findCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findCustomerByUserID = `-- name: FindCustomerByUserID :one
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM customers
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) FindCustomerByUserID(ctx context.Context, userID pgtype.Int4) (Customer, error) {
	row := q.db.QueryRow(ctx, findCustomerByUserID, userID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteCustomer = `-- name: HardDeleteCustomer :exec
DELETE FROM customers WHERE id = $1
`

func (q *Queries) HardDeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, hardDeleteCustomer, id)
	return err
}

const softDeleteCustomer = `-- name: SoftDeleteCustomer :exec
UPDATE customers
SET 
    is_active = FALSE,
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) SoftDeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteCustomer, id)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET 
    photo = $2, 
    first_name = $3, 
    last_name = $4, 
    gender = $5, 
    user_id = $6, 
    is_active = $7, 
    date_of_birth = $8,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateCustomerParams struct {
	ID          int32
	Photo       string
	FirstName   string
	LastName    string
	Gender      models.PersonGender
	UserID      pgtype.Int4
	IsActive    bool
	DateOfBirth pgtype.Date
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer,
		arg.ID,
		arg.Photo,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.UserID,
		arg.IsActive,
		arg.DateOfBirth,
	)
	return err
}
