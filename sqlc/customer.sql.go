// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer.sql

package sqlc

import (
	"context"

	"github.com/alexisTrejo11/Clinic-Vet-API/db/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE customers
SET 
    is_active = true, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    photo, first_name, last_name, phone_number, gender, address, user_id, is_active, date_of_birth, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
`

type CreateCustomerParams struct {
	Photo       string
	FirstName   string
	LastName    string
	PhoneNumber string
	Gender      models.PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	IsActive    bool
	DateOfBirth pgtype.Date
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Photo,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Gender,
		arg.Address,
		arg.UserID,
		arg.IsActive,
		arg.DateOfBirth,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE customers
SET 
    is_active = false, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const existCustomerByPhoneNumber = `-- name: ExistCustomerByPhoneNumber :one
SELECT COUNT(*) > 0
FROM customers
WHERE phone_number = $1
`

func (q *Queries) ExistCustomerByPhoneNumber(ctx context.Context, phoneNumber string) (bool, error) {
	row := q.db.QueryRow(ctx, existCustomerByPhoneNumber, phoneNumber)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existsCustomerByID = `-- name: ExistsCustomerByID :one
SELECT COUNT(*) > 0
FROM customers
WHERE id = $1
`

func (q *Queries) ExistsCustomerByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsCustomerByID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM customers
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByPhone = `-- name: GetCustomerByPhone :one
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM customers
WHERE phone_number = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCustomerByPhone(ctx context.Context, phoneNumber string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByPhone, phoneNumber)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByUserID = `-- name: GetCustomerByUserID :one
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM customers
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCustomerByUserID(ctx context.Context, userID pgtype.Int4) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByUserID, userID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteCustomer = `-- name: SoftDeleteCustomer :exec
UPDATE customers
SET 
    is_active = FALSE,
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) SoftDeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteCustomer, id)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET 
    photo = $2, 
    first_name = $3, 
    last_name = $4, 
    phone_number = $5, 
    gender = $6, 
    address = $7, 
    user_id = $8, 
    is_active = $9, 
    date_of_birth = $10,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
`

type UpdateCustomerParams struct {
	ID          int32
	Photo       string
	FirstName   string
	LastName    string
	PhoneNumber string
	Gender      models.PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	IsActive    bool
	DateOfBirth pgtype.Date
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer,
		arg.ID,
		arg.Photo,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Gender,
		arg.Address,
		arg.UserID,
		arg.IsActive,
		arg.DateOfBirth,
	)
	return err
}
