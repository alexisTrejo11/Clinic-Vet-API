// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: pets.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPet = `-- name: CreatePet :one
INSERT INTO pets (
    name, 
    photo, 
    species, 
    breed, 
    age, 
    gender, 
    weight, 
    color, 
    microchip, 
    is_neutered, 
    customer_id, 
    allergies, 
    current_medications, 
    special_needs, 
    is_active,
    created_at,
    updated_at
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15,
    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, name, photo, species, breed, age, gender, weight, color, microchip, is_neutered, customer_id, allergies, current_medications, special_needs, is_active, created_at, updated_at
`

type CreatePetParams struct {
	Name               string
	Photo              pgtype.Text
	Species            string
	Breed              pgtype.Text
	Age                pgtype.Int2
	Gender             pgtype.Text
	Weight             pgtype.Numeric
	Color              pgtype.Text
	Microchip          pgtype.Text
	IsNeutered         pgtype.Bool
	CustomerID         int32
	Allergies          pgtype.Text
	CurrentMedications pgtype.Text
	SpecialNeeds       pgtype.Text
	IsActive           bool
}

func (q *Queries) CreatePet(ctx context.Context, arg CreatePetParams) (Pet, error) {
	row := q.db.QueryRow(ctx, createPet,
		arg.Name,
		arg.Photo,
		arg.Species,
		arg.Breed,
		arg.Age,
		arg.Gender,
		arg.Weight,
		arg.Color,
		arg.Microchip,
		arg.IsNeutered,
		arg.CustomerID,
		arg.Allergies,
		arg.CurrentMedications,
		arg.SpecialNeeds,
		arg.IsActive,
	)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Photo,
		&i.Species,
		&i.Breed,
		&i.Age,
		&i.Gender,
		&i.Weight,
		&i.Color,
		&i.Microchip,
		&i.IsNeutered,
		&i.CustomerID,
		&i.Allergies,
		&i.CurrentMedications,
		&i.SpecialNeeds,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePet = `-- name: DeletePet :exec
DELETE FROM pets
WHERE id = $1
`

func (q *Queries) DeletePet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePet, id)
	return err
}

const getPetByID = `-- name: GetPetByID :one
SELECT id, name, photo, species, breed, age, gender, weight, color, microchip, is_neutered, customer_id, allergies, current_medications, special_needs, is_active, created_at, updated_at FROM pets
WHERE id = $1
`

func (q *Queries) GetPetByID(ctx context.Context, id int32) (Pet, error) {
	row := q.db.QueryRow(ctx, getPetByID, id)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Photo,
		&i.Species,
		&i.Breed,
		&i.Age,
		&i.Gender,
		&i.Weight,
		&i.Color,
		&i.Microchip,
		&i.IsNeutered,
		&i.CustomerID,
		&i.Allergies,
		&i.CurrentMedications,
		&i.SpecialNeeds,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPetByIDAndCustomerID = `-- name: GetPetByIDAndCustomerID :one
SELECT id, name, photo, species, breed, age, gender, weight, color, microchip, is_neutered, customer_id, allergies, current_medications, special_needs, is_active, created_at, updated_at FROM pets
WHERE id = $1 AND customer_id = $2
`

type GetPetByIDAndCustomerIDParams struct {
	ID         int32
	CustomerID int32
}

func (q *Queries) GetPetByIDAndCustomerID(ctx context.Context, arg GetPetByIDAndCustomerIDParams) (Pet, error) {
	row := q.db.QueryRow(ctx, getPetByIDAndCustomerID, arg.ID, arg.CustomerID)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Photo,
		&i.Species,
		&i.Breed,
		&i.Age,
		&i.Gender,
		&i.Weight,
		&i.Color,
		&i.Microchip,
		&i.IsNeutered,
		&i.CustomerID,
		&i.Allergies,
		&i.CurrentMedications,
		&i.SpecialNeeds,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPetsByCustomerID = `-- name: GetPetsByCustomerID :many
SELECT id, name, photo, species, breed, age, gender, weight, color, microchip, is_neutered, customer_id, allergies, current_medications, special_needs, is_active, created_at, updated_at FROM pets
WHERE customer_id = $1
ORDER BY id
`

func (q *Queries) GetPetsByCustomerID(ctx context.Context, customerID int32) ([]Pet, error) {
	rows, err := q.db.Query(ctx, getPetsByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pet
	for rows.Next() {
		var i Pet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Photo,
			&i.Species,
			&i.Breed,
			&i.Age,
			&i.Gender,
			&i.Weight,
			&i.Color,
			&i.Microchip,
			&i.IsNeutered,
			&i.CustomerID,
			&i.Allergies,
			&i.CurrentMedications,
			&i.SpecialNeeds,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPets = `-- name: ListPets :many
SELECT id, name, photo, species, breed, age, gender, weight, color, microchip, is_neutered, customer_id, allergies, current_medications, special_needs, is_active, created_at, updated_at FROM pets
ORDER BY id
`

func (q *Queries) ListPets(ctx context.Context) ([]Pet, error) {
	rows, err := q.db.Query(ctx, listPets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pet
	for rows.Next() {
		var i Pet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Photo,
			&i.Species,
			&i.Breed,
			&i.Age,
			&i.Gender,
			&i.Weight,
			&i.Color,
			&i.Microchip,
			&i.IsNeutered,
			&i.CustomerID,
			&i.Allergies,
			&i.CurrentMedications,
			&i.SpecialNeeds,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePet = `-- name: UpdatePet :exec
UPDATE pets
SET 
    name = $2,
    photo = $3,
    species = $4,
    breed = $5,
    age = $6,
    gender = $7,
    weight = $8,
    color = $9,
    microchip = $10,
    is_neutered = $11,
    customer_id = $12,
    allergies = $13,
    current_medications = $14,
    special_needs = $15,
    is_active = $16,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, photo, species, breed, age, gender, weight, color, microchip, is_neutered, customer_id, allergies, current_medications, special_needs, is_active, created_at, updated_at
`

type UpdatePetParams struct {
	ID                 int32
	Name               string
	Photo              pgtype.Text
	Species            string
	Breed              pgtype.Text
	Age                pgtype.Int2
	Gender             pgtype.Text
	Weight             pgtype.Numeric
	Color              pgtype.Text
	Microchip          pgtype.Text
	IsNeutered         pgtype.Bool
	CustomerID         int32
	Allergies          pgtype.Text
	CurrentMedications pgtype.Text
	SpecialNeeds       pgtype.Text
	IsActive           bool
}

func (q *Queries) UpdatePet(ctx context.Context, arg UpdatePetParams) error {
	_, err := q.db.Exec(ctx, updatePet,
		arg.ID,
		arg.Name,
		arg.Photo,
		arg.Species,
		arg.Breed,
		arg.Age,
		arg.Gender,
		arg.Weight,
		arg.Color,
		arg.Microchip,
		arg.IsNeutered,
		arg.CustomerID,
		arg.Allergies,
		arg.CurrentMedications,
		arg.SpecialNeeds,
		arg.IsActive,
	)
	return err
}
