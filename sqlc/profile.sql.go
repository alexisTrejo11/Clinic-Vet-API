// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profile.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (user_id, bio, profile_pic, created_at, last_update)
VALUES ($1, $2, $3,  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, user_id, bio, profile_pic, created_at, last_update
`

type CreateProfileParams struct {
	UserID     pgtype.Int4
	Bio        pgtype.Text
	ProfilePic pgtype.Text
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile, arg.UserID, arg.Bio, arg.ProfilePic)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.LastUpdate,
	)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM profiles
WHERE user_id = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, userID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteUserProfile, userID)
	return err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT id, user_id, bio, profile_pic, created_at, last_update FROM profiles
WHERE user_id = $1
`

func (q *Queries) GetUserProfile(ctx context.Context, userID pgtype.Int4) (Profile, error) {
	row := q.db.QueryRow(ctx, getUserProfile, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.LastUpdate,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE profiles
SET 
    bio = $2, 
    profile_pic = $3, 
    last_update = CURRENT_TIMESTAMP
WHERE 
    user_id = $1
RETURNING id, user_id, bio, profile_pic, created_at, last_update
`

type UpdateUserProfileParams struct {
	UserID     pgtype.Int4
	Bio        pgtype.Text
	ProfilePic pgtype.Text
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateUserProfile, arg.UserID, arg.Bio, arg.ProfilePic)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.LastUpdate,
	)
	return i, err
}
