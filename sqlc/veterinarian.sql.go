// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: veterinarian.sql

package sqlc

import (
	"context"

	"github.com/alexisTrejo11/Clinic-Vet-API/db/models"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees(
    first_name, last_name, photo, license_number, speciality,
    years_of_experience, is_active, schedule_json, created_at, updated_at
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8::jsonb, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at
`

type CreateEmployeeParams struct {
	FirstName         string
	LastName          string
	Photo             string
	LicenseNumber     string
	Speciality        models.VeterinarianSpeciality
	YearsOfExperience int32
	IsActive          bool
	Column8           []byte
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Photo,
		arg.LicenseNumber,
		arg.Speciality,
		arg.YearsOfExperience,
		arg.IsActive,
		arg.Column8,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.LicenseNumber,
		&i.Speciality,
		&i.YearsOfExperience,
		&i.IsActive,
		&i.UserID,
		&i.ScheduleJson,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getEmployeeById = `-- name: GetEmployeeById :one
SELECT 
    id, first_name, last_name, photo, license_number, speciality, years_of_experience, 
    is_active, user_id, schedule_json, created_at, updated_at, deleted_at
FROM employees
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetEmployeeById(ctx context.Context, id int32) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeById, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.LicenseNumber,
		&i.Speciality,
		&i.YearsOfExperience,
		&i.IsActive,
		&i.UserID,
		&i.ScheduleJson,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getEmployeesWithSchedule = `-- name: GetEmployeesWithSchedule :many
SELECT id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at FROM employees
WHERE 
    deleted_at IS NULL
    AND schedule_json @> '{"work_days": [{"day": 1, "start_hour": 9}]}'
`

func (q *Queries) GetEmployeesWithSchedule(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, getEmployeesWithSchedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Photo,
			&i.LicenseNumber,
			&i.Speciality,
			&i.YearsOfExperience,
			&i.IsActive,
			&i.UserID,
			&i.ScheduleJson,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteEmployee = `-- name: SoftDeleteEmployee :exec
UPDATE employees
SET
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteEmployee, id)
	return err
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employees
SET
    first_name = COALESCE($1, first_name),
    last_name = COALESCE($2, last_name),  
    photo = COALESCE($3, photo),          
    license_number = COALESCE($4, license_number),
    speciality = COALESCE($5, speciality),
    years_of_experience = COALESCE($6, years_of_experience),
    is_active = COALESCE($7, is_active),
    schedule_json = COALESCE($8::jsonb, schedule_json),
    updated_at = CURRENT_TIMESTAMP        
WHERE
    id = $9 AND deleted_at IS NULL       
RETURNING
    id, first_name, last_name, photo, license_number, speciality, years_of_experience,
    is_active, user_id, schedule_json, created_at, updated_at, deleted_at
`

type UpdateEmployeeParams struct {
	FirstName         string
	LastName          string
	Photo             string
	LicenseNumber     string
	Speciality        models.VeterinarianSpeciality
	YearsOfExperience int32
	IsActive          bool
	Column8           []byte
	ID                int32
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Photo,
		arg.LicenseNumber,
		arg.Speciality,
		arg.YearsOfExperience,
		arg.IsActive,
		arg.Column8,
		arg.ID,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.LicenseNumber,
		&i.Speciality,
		&i.YearsOfExperience,
		&i.IsActive,
		&i.UserID,
		&i.ScheduleJson,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
