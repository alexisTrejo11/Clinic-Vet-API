// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: owner.sql

package sqlc

import (
	"context"

	"github.com/alexisTrejo11/Clinic-Vet-API/db/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE owners
SET 
    is_active = true, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const createOwner = `-- name: CreateOwner :one
INSERT INTO owners (
    photo, first_name, last_name, phone_number, gender, address, user_id, is_active, date_of_birth, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
`

type CreateOwnerParams struct {
	Photo       string
	FirstName   string
	LastName    string
	PhoneNumber string
	Gender      models.PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	IsActive    bool
	DateOfBirth pgtype.Date
}

func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (Owner, error) {
	row := q.db.QueryRow(ctx, createOwner,
		arg.Photo,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Gender,
		arg.Address,
		arg.UserID,
		arg.IsActive,
		arg.DateOfBirth,
	)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE owners
SET 
    is_active = false, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const existByID = `-- name: ExistByID :one
SELECT COUNT(*) > 0
FROM owners
WHERE id = $1
`

func (q *Queries) ExistByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existByID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existByPhoneNumber = `-- name: ExistByPhoneNumber :one
SELECT COUNT(*) > 0
FROM owners
WHERE phone_number = $1
`

func (q *Queries) ExistByPhoneNumber(ctx context.Context, phoneNumber string) (bool, error) {
	row := q.db.QueryRow(ctx, existByPhoneNumber, phoneNumber)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getOwnerByID = `-- name: GetOwnerByID :one
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM owners
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetOwnerByID(ctx context.Context, id int32) (Owner, error) {
	row := q.db.QueryRow(ctx, getOwnerByID, id)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOwnerByPhone = `-- name: GetOwnerByPhone :one
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM owners
WHERE phone_number = $1 AND deleted_at IS NULL
`

func (q *Queries) GetOwnerByPhone(ctx context.Context, phoneNumber string) (Owner, error) {
	row := q.db.QueryRow(ctx, getOwnerByPhone, phoneNumber)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOwnerByUserID = `-- name: GetOwnerByUserID :one
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
FROM owners
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetOwnerByUserID(ctx context.Context, userID pgtype.Int4) (Owner, error) {
	row := q.db.QueryRow(ctx, getOwnerByUserID, userID)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listOwners = `-- name: ListOwners :many
SELECT id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at FROM owners
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListOwnersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListOwners(ctx context.Context, arg ListOwnersParams) ([]Owner, error) {
	rows, err := q.db.Query(ctx, listOwners, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Owner
	for rows.Next() {
		var i Owner
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Photo,
			&i.PhoneNumber,
			&i.DateOfBirth,
			&i.Gender,
			&i.Address,
			&i.UserID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteOwner = `-- name: SoftDeleteOwner :exec
UPDATE owners
SET 
    is_active = FALSE,
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) SoftDeleteOwner(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteOwner, id)
	return err
}

const updateOwner = `-- name: UpdateOwner :exec
UPDATE owners
SET 
    photo = $2, 
    first_name = $3, 
    last_name = $4, 
    phone_number = $5, 
    gender = $6, 
    address = $7, 
    user_id = $8, 
    is_active = $9, 
    date_of_birth = $10,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, first_name, last_name, photo, phone_number, date_of_birth, gender, address, user_id, is_active, created_at, updated_at, deleted_at
`

type UpdateOwnerParams struct {
	ID          int32
	Photo       string
	FirstName   string
	LastName    string
	PhoneNumber string
	Gender      models.PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	IsActive    bool
	DateOfBirth pgtype.Date
}

func (q *Queries) UpdateOwner(ctx context.Context, arg UpdateOwnerParams) error {
	_, err := q.db.Exec(ctx, updateOwner,
		arg.ID,
		arg.Photo,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Gender,
		arg.Address,
		arg.UserID,
		arg.IsActive,
		arg.DateOfBirth,
	)
	return err
}
