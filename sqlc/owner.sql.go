// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: owner.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOwner = `-- name: CreateOwner :one
INSERT INTO owners (
    id, photo, firstName, lastName, phoneNumber, gender, address, user_id, isActive, date_of_birth, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, photo, firstName, lastName, phoneNumber, gender, address, user_id, isActive, date_of_birth, created_at, updated_at, deleted_at
`

type CreateOwnerParams struct {
	ID          int32
	Photo       string
	Firstname   string
	Lastname    string
	Phonenumber string
	Gender      PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	Isactive    bool
	DateOfBirth pgtype.Date
}

type CreateOwnerRow struct {
	ID          int32
	Photo       string
	Firstname   string
	Lastname    string
	Phonenumber string
	Gender      PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	Isactive    bool
	DateOfBirth pgtype.Date
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (CreateOwnerRow, error) {
	row := q.db.QueryRow(ctx, createOwner,
		arg.ID,
		arg.Photo,
		arg.Firstname,
		arg.Lastname,
		arg.Phonenumber,
		arg.Gender,
		arg.Address,
		arg.UserID,
		arg.Isactive,
		arg.DateOfBirth,
	)
	var i CreateOwnerRow
	err := row.Scan(
		&i.ID,
		&i.Photo,
		&i.Firstname,
		&i.Lastname,
		&i.Phonenumber,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.Isactive,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteOwner = `-- name: DeleteOwner :exec
UPDATE owners
SET 
    isActive = FALSE,
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteOwner(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOwner, id)
	return err
}

const getOwnerByID = `-- name: GetOwnerByID :one
SELECT id, photo, firstName, lastName, phoneNumber, gender, address, user_id, isActive, date_of_birth, created_at, updated_at, deleted_at
FROM owners
WHERE id = $1 AND deleted_at IS NULL
`

type GetOwnerByIDRow struct {
	ID          int32
	Photo       string
	Firstname   string
	Lastname    string
	Phonenumber string
	Gender      PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	Isactive    bool
	DateOfBirth pgtype.Date
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

func (q *Queries) GetOwnerByID(ctx context.Context, id int32) (GetOwnerByIDRow, error) {
	row := q.db.QueryRow(ctx, getOwnerByID, id)
	var i GetOwnerByIDRow
	err := row.Scan(
		&i.ID,
		&i.Photo,
		&i.Firstname,
		&i.Lastname,
		&i.Phonenumber,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.Isactive,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOwnerByUserID = `-- name: GetOwnerByUserID :one
SELECT id, photo, firstName, lastName, phoneNumber, gender, address, user_id, isActive, date_of_birth, created_at, updated_at, deleted_at
FROM owners
WHERE user_id = $1 AND deleted_at IS NULL
`

type GetOwnerByUserIDRow struct {
	ID          int32
	Photo       string
	Firstname   string
	Lastname    string
	Phonenumber string
	Gender      PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	Isactive    bool
	DateOfBirth pgtype.Date
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

func (q *Queries) GetOwnerByUserID(ctx context.Context, userID pgtype.Int4) (GetOwnerByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getOwnerByUserID, userID)
	var i GetOwnerByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.Photo,
		&i.Firstname,
		&i.Lastname,
		&i.Phonenumber,
		&i.Gender,
		&i.Address,
		&i.UserID,
		&i.Isactive,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listOwners = `-- name: ListOwners :many
SELECT id, photo, firstName, lastName, phoneNumber, gender, address, user_id, isActive, date_of_birth, created_at, updated_at, deleted_at
FROM owners
WHERE deleted_at IS NULL
ORDER BY id
`

type ListOwnersRow struct {
	ID          int32
	Photo       string
	Firstname   string
	Lastname    string
	Phonenumber string
	Gender      PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	Isactive    bool
	DateOfBirth pgtype.Date
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

func (q *Queries) ListOwners(ctx context.Context) ([]ListOwnersRow, error) {
	rows, err := q.db.Query(ctx, listOwners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOwnersRow
	for rows.Next() {
		var i ListOwnersRow
		if err := rows.Scan(
			&i.ID,
			&i.Photo,
			&i.Firstname,
			&i.Lastname,
			&i.Phonenumber,
			&i.Gender,
			&i.Address,
			&i.UserID,
			&i.Isactive,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOwner = `-- name: UpdateOwner :exec
UPDATE owners
SET 
    photo = $2, 
    firstName = $3, 
    lastName = $4, 
    phoneNumber = $5, 
    gender = $6, 
    address = $7, 
    user_id = $8, 
    isActive = $9, 
    date_of_birth = $10,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateOwnerParams struct {
	ID          int32
	Photo       string
	Firstname   string
	Lastname    string
	Phonenumber string
	Gender      PersonGender
	Address     pgtype.Text
	UserID      pgtype.Int4
	Isactive    bool
	DateOfBirth pgtype.Date
}

func (q *Queries) UpdateOwner(ctx context.Context, arg UpdateOwnerParams) error {
	_, err := q.db.Exec(ctx, updateOwner,
		arg.ID,
		arg.Photo,
		arg.Firstname,
		arg.Lastname,
		arg.Phonenumber,
		arg.Gender,
		arg.Address,
		arg.UserID,
		arg.Isactive,
		arg.DateOfBirth,
	)
	return err
}
