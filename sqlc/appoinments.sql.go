// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: appoinments.sql

package sqlc

import (
	"context"

	"clinic-vet-api/db/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAppointments = `-- name: CountAppointments :one
SELECT COUNT(*) FROM appointments
WHERE deleted_at IS NULL
`

func (q *Queries) CountAppointments(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppointmentsByCustomerID = `-- name: CountAppointmentsByCustomerID :one
SELECT COUNT(*) FROM appointments
WHERE customer_id = $1
AND deleted_at IS NULL
`

func (q *Queries) CountAppointmentsByCustomerID(ctx context.Context, customerID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointmentsByCustomerID, customerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppointmentsByDateRange = `-- name: CountAppointmentsByDateRange :one
SELECT COUNT(*) FROM appointments
WHERE schedule_date BETWEEN $1 AND $2
AND deleted_at IS NULL
`

type CountAppointmentsByDateRangeParams struct {
	ScheduleDate   pgtype.Timestamptz
	ScheduleDate_2 pgtype.Timestamptz
}

func (q *Queries) CountAppointmentsByDateRange(ctx context.Context, arg CountAppointmentsByDateRangeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointmentsByDateRange, arg.ScheduleDate, arg.ScheduleDate_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppointmentsByEmployeeID = `-- name: CountAppointmentsByEmployeeID :one
SELECT COUNT(*) FROM appointments
WHERE employee_id = $1
AND deleted_at IS NULL
`

func (q *Queries) CountAppointmentsByEmployeeID(ctx context.Context, employeeID pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointmentsByEmployeeID, employeeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppointmentsByPetID = `-- name: CountAppointmentsByPetID :one
SELECT COUNT(*) FROM appointments
WHERE pet_id = $1
AND deleted_at IS NULL
`

func (q *Queries) CountAppointmentsByPetID(ctx context.Context, petID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointmentsByPetID, petID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppointmentsByStatus = `-- name: CountAppointmentsByStatus :one
SELECT COUNT(*) FROM appointments
WHERE status = $1
AND deleted_at IS NULL
`

func (q *Queries) CountAppointmentsByStatus(ctx context.Context, status models.AppointmentStatus) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointmentsByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments (
    clinic_service, 
    schedule_date, 
    status, 
    reason, 
    notes, 
    customer_id, 
    employee_id,
    pet_id,
    created_at,
    updated_at,
    deleted_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL
) RETURNING id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at
`

type CreateAppointmentParams struct {
	ClinicService models.ClinicService
	ScheduleDate  pgtype.Timestamptz
	Status        models.AppointmentStatus
	Reason        string
	Notes         pgtype.Text
	CustomerID    int32
	EmployeeID    pgtype.Int4
	PetID         int32
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.ClinicService,
		arg.ScheduleDate,
		arg.Status,
		arg.Reason,
		arg.Notes,
		arg.CustomerID,
		arg.EmployeeID,
		arg.PetID,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
UPDATE appointments SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteAppointment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAppointment, id)
	return err
}

const existsAppointmentID = `-- name: ExistsAppointmentID :one
SELECT COUNT(*) > 0 FROM appointments
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) ExistsAppointmentID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsAppointmentID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existsConflictingAppointment = `-- name: ExistsConflictingAppointment :one
SELECT COUNT(*) > 0 FROM appointments
WHERE (schedule_date BETWEEN $1 AND $2) AND employee_id = $3
`

type ExistsConflictingAppointmentParams struct {
	ScheduleDate   pgtype.Timestamptz
	ScheduleDate_2 pgtype.Timestamptz
	EmployeeID     pgtype.Int4
}

func (q *Queries) ExistsConflictingAppointment(ctx context.Context, arg ExistsConflictingAppointmentParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsConflictingAppointment, arg.ScheduleDate, arg.ScheduleDate_2, arg.EmployeeID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findAppointmentByID = `-- name: FindAppointmentByID :one
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments 
WHERE id = $1 
AND deleted_at IS NULL
`

func (q *Queries) FindAppointmentByID(ctx context.Context, id int32) (Appointment, error) {
	row := q.db.QueryRow(ctx, findAppointmentByID, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findAppointmentByIDAndCustomerID = `-- name: FindAppointmentByIDAndCustomerID :one
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments 
WHERE id = $1 
AND customer_id = $2
AND deleted_at IS NULL
`

type FindAppointmentByIDAndCustomerIDParams struct {
	ID         int32
	CustomerID int32
}

func (q *Queries) FindAppointmentByIDAndCustomerID(ctx context.Context, arg FindAppointmentByIDAndCustomerIDParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, findAppointmentByIDAndCustomerID, arg.ID, arg.CustomerID)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findAppointmentByIDAndEmployeeID = `-- name: FindAppointmentByIDAndEmployeeID :one
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments 
WHERE id = $1 
AND employee_id = $2
AND deleted_at IS NULL
`

type FindAppointmentByIDAndEmployeeIDParams struct {
	ID         int32
	EmployeeID pgtype.Int4
}

func (q *Queries) FindAppointmentByIDAndEmployeeID(ctx context.Context, arg FindAppointmentByIDAndEmployeeIDParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, findAppointmentByIDAndEmployeeID, arg.ID, arg.EmployeeID)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findAppointments = `-- name: FindAppointments :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments 
WHERE deleted_at IS NULL 
ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type FindAppointmentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindAppointments(ctx context.Context, arg FindAppointmentsParams) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, findAppointments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppointmentsByCustomerID = `-- name: FindAppointmentsByCustomerID :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments 
WHERE customer_id = $1
AND deleted_at IS NULL
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type FindAppointmentsByCustomerIDParams struct {
	CustomerID int32
	Limit      int32
	Offset     int32
}

func (q *Queries) FindAppointmentsByCustomerID(ctx context.Context, arg FindAppointmentsByCustomerIDParams) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, findAppointmentsByCustomerID, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppointmentsByDateRange = `-- name: FindAppointmentsByDateRange :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments
WHERE schedule_date BETWEEN $1 AND $2
AND deleted_at IS NULL
ORDER BY schedule_date DESC LIMIT $3 OFFSET $4
`

type FindAppointmentsByDateRangeParams struct {
	ScheduleDate   pgtype.Timestamptz
	ScheduleDate_2 pgtype.Timestamptz
	Limit          int32
	Offset         int32
}

func (q *Queries) FindAppointmentsByDateRange(ctx context.Context, arg FindAppointmentsByDateRangeParams) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, findAppointmentsByDateRange,
		arg.ScheduleDate,
		arg.ScheduleDate_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppointmentsByEmployeeID = `-- name: FindAppointmentsByEmployeeID :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments
WHERE employee_id = $1
AND deleted_at IS NULL
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type FindAppointmentsByEmployeeIDParams struct {
	EmployeeID pgtype.Int4
	Limit      int32
	Offset     int32
}

func (q *Queries) FindAppointmentsByEmployeeID(ctx context.Context, arg FindAppointmentsByEmployeeIDParams) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, findAppointmentsByEmployeeID, arg.EmployeeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppointmentsByPetID = `-- name: FindAppointmentsByPetID :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments
WHERE pet_id = $1
AND deleted_at IS NULL
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type FindAppointmentsByPetIDParams struct {
	PetID  int32
	Limit  int32
	Offset int32
}

func (q *Queries) FindAppointmentsByPetID(ctx context.Context, arg FindAppointmentsByPetIDParams) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, findAppointmentsByPetID, arg.PetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppointmentsByStatus = `-- name: FindAppointmentsByStatus :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments
WHERE status = $1
AND deleted_at IS NULL
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type FindAppointmentsByStatusParams struct {
	Status models.AppointmentStatus
	Limit  int32
	Offset int32
}

func (q *Queries) FindAppointmentsByStatus(ctx context.Context, arg FindAppointmentsByStatusParams) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, findAppointmentsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointment = `-- name: UpdateAppointment :one
UPDATE appointments SET
    clinic_service = $2,
    schedule_date = $3,
    status = $4,
    reason = $5,
    notes = $6,
    customer_id = $7,
    employee_id = $8,
    pet_id = $9,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at
`

type UpdateAppointmentParams struct {
	ID            int32
	ClinicService models.ClinicService
	ScheduleDate  pgtype.Timestamptz
	Status        models.AppointmentStatus
	Reason        string
	Notes         pgtype.Text
	CustomerID    int32
	EmployeeID    pgtype.Int4
	PetID         int32
}

func (q *Queries) UpdateAppointment(ctx context.Context, arg UpdateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, updateAppointment,
		arg.ID,
		arg.ClinicService,
		arg.ScheduleDate,
		arg.Status,
		arg.Reason,
		arg.Notes,
		arg.CustomerID,
		arg.EmployeeID,
		arg.PetID,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
