// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: appoinments.sql

package sqlc

import (
	"context"

	"clinic-vet-api/db/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAppointmentsBySpec = `-- name: CountAppointmentsBySpec :one
SELECT COUNT(*) 
FROM appointments 
WHERE 
    ($1::INT IS NULL OR id = $1)
    AND ($2::INT IS NULL OR customer_id = $2)
    AND ($3::INT IS NULL OR employee_id = $3)
    AND ($4::INT IS NULL OR pet_id = $4)
    AND (
        $5::TEXT IS NULL OR 
        $5::TEXT = '' OR 
        clinic_service = $5::clinic_service
    )
    AND (
        $6::TEXT IS NULL OR 
        $6::TEXT = '' OR 
        status = $6::appointment_status    
    )
    AND ($7::timestamp IS NULL OR scheduled_date >= $7)
    AND ($8::timestamp IS NULL OR scheduled_date <= $8)
    AND ($9::timestamp IS NULL OR scheduled_date = $9)
`

type CountAppointmentsBySpecParams struct {
	Column1 int32
	Column2 int32
	Column3 int32
	Column4 int32
	Column5 string
	Column6 string
	Column7 pgtype.Timestamp
	Column8 pgtype.Timestamp
	Column9 pgtype.Timestamp
}

func (q *Queries) CountAppointmentsBySpec(ctx context.Context, arg CountAppointmentsBySpecParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointmentsBySpec,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.Column9,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments (
    clinic_service, 
    scheduled_date, 
    status, 
    notes, 
    customer_id, 
    employee_id,
    pet_id,
    created_at,
    updated_at,
    deleted_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL
) RETURNING id, clinic_service, scheduled_date, status, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at
`

type CreateAppointmentParams struct {
	ClinicService models.ClinicService
	ScheduledDate pgtype.Timestamptz
	Status        models.AppointmentStatus
	Notes         pgtype.Text
	CustomerID    int32
	EmployeeID    pgtype.Int4
	PetID         int32
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.ClinicService,
		arg.ScheduledDate,
		arg.Status,
		arg.Notes,
		arg.CustomerID,
		arg.EmployeeID,
		arg.PetID,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduledDate,
		&i.Status,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
UPDATE appointments SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteAppointment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAppointment, id)
	return err
}

const existsAppointmentID = `-- name: ExistsAppointmentID :one
SELECT COUNT(*) > 0 FROM appointments
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) ExistsAppointmentID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsAppointmentID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existsConflictingAppointment = `-- name: ExistsConflictingAppointment :one
SELECT COUNT(*) > 0 FROM appointments
WHERE (scheduled_date BETWEEN $1 AND $2) AND employee_id = $3
`

type ExistsConflictingAppointmentParams struct {
	ScheduledDate   pgtype.Timestamptz
	ScheduledDate_2 pgtype.Timestamptz
	EmployeeID      pgtype.Int4
}

func (q *Queries) ExistsConflictingAppointment(ctx context.Context, arg ExistsConflictingAppointmentParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsConflictingAppointment, arg.ScheduledDate, arg.ScheduledDate_2, arg.EmployeeID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findAppointmentByID = `-- name: FindAppointmentByID :one
SELECT id, clinic_service, scheduled_date, status, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments 
WHERE id = $1 
AND deleted_at IS NULL
`

func (q *Queries) FindAppointmentByID(ctx context.Context, id int32) (Appointment, error) {
	row := q.db.QueryRow(ctx, findAppointmentByID, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduledDate,
		&i.Status,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findAppointmentByIDAndCustomerID = `-- name: FindAppointmentByIDAndCustomerID :one
SELECT id, clinic_service, scheduled_date, status, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments 
WHERE id = $1 
AND customer_id = $2
AND deleted_at IS NULL
`

type FindAppointmentByIDAndCustomerIDParams struct {
	ID         int32
	CustomerID int32
}

func (q *Queries) FindAppointmentByIDAndCustomerID(ctx context.Context, arg FindAppointmentByIDAndCustomerIDParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, findAppointmentByIDAndCustomerID, arg.ID, arg.CustomerID)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduledDate,
		&i.Status,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findAppointmentByIDAndEmployeeID = `-- name: FindAppointmentByIDAndEmployeeID :one
SELECT id, clinic_service, scheduled_date, status, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appointments 
WHERE id = $1 
AND employee_id = $2
AND deleted_at IS NULL
`

type FindAppointmentByIDAndEmployeeIDParams struct {
	ID         int32
	EmployeeID pgtype.Int4
}

func (q *Queries) FindAppointmentByIDAndEmployeeID(ctx context.Context, arg FindAppointmentByIDAndEmployeeIDParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, findAppointmentByIDAndEmployeeID, arg.ID, arg.EmployeeID)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduledDate,
		&i.Status,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findAppointmentsBySpec = `-- name: FindAppointmentsBySpec :many
SELECT 
    id, clinic_service, scheduled_date, status, notes,
    customer_id, employee_id, pet_id, created_at, updated_at
FROM appointments 
WHERE 
    ($1::INT IS NULL OR id = $1)
    AND ($2::INT IS NULL OR customer_id = $2)
    AND ($3::INT IS NULL OR employee_id = $3)
    AND ($4::INT IS NULL OR pet_id = $4)
    AND (
        $5::TEXT IS NULL OR 
        $5::TEXT = '' OR 
        clinic_service = $5::clinic_service  
    )
    AND (
        $6::TEXT IS NULL OR 
        $6::TEXT = '' OR 
        status = $6::appointment_status      
    )
    AND ($7::timestamp IS NULL OR scheduled_date >= $7)
    AND ($8::timestamp IS NULL OR scheduled_date <= $8)
    AND ($9::timestamp IS NULL OR scheduled_date = $9)
ORDER BY scheduled_date DESC
LIMIT $10 OFFSET $11
`

type FindAppointmentsBySpecParams struct {
	Column1 int32
	Column2 int32
	Column3 int32
	Column4 int32
	Column5 string
	Column6 string
	Column7 pgtype.Timestamp
	Column8 pgtype.Timestamp
	Column9 pgtype.Timestamp
	Limit   int32
	Offset  int32
}

type FindAppointmentsBySpecRow struct {
	ID            int32
	ClinicService models.ClinicService
	ScheduledDate pgtype.Timestamptz
	Status        models.AppointmentStatus
	Notes         pgtype.Text
	CustomerID    int32
	EmployeeID    pgtype.Int4
	PetID         int32
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) FindAppointmentsBySpec(ctx context.Context, arg FindAppointmentsBySpecParams) ([]FindAppointmentsBySpecRow, error) {
	rows, err := q.db.Query(ctx, findAppointmentsBySpec,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.Column9,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAppointmentsBySpecRow
	for rows.Next() {
		var i FindAppointmentsBySpecRow
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduledDate,
			&i.Status,
			&i.Notes,
			&i.CustomerID,
			&i.EmployeeID,
			&i.PetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointment = `-- name: UpdateAppointment :one
UPDATE appointments SET
    clinic_service = $2,
    scheduled_date = $3,
    status = $4,
    notes = $5,
    customer_id = $6,
    employee_id = $7,
    pet_id = $8,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, clinic_service, scheduled_date, status, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at
`

type UpdateAppointmentParams struct {
	ID            int32
	ClinicService models.ClinicService
	ScheduledDate pgtype.Timestamptz
	Status        models.AppointmentStatus
	Notes         pgtype.Text
	CustomerID    int32
	EmployeeID    pgtype.Int4
	PetID         int32
}

func (q *Queries) UpdateAppointment(ctx context.Context, arg UpdateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, updateAppointment,
		arg.ID,
		arg.ClinicService,
		arg.ScheduledDate,
		arg.Status,
		arg.Notes,
		arg.CustomerID,
		arg.EmployeeID,
		arg.PetID,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduledDate,
		&i.Status,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
