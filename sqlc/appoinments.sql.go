// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: appoinments.sql

package sqlc

import (
	"context"

	"github.com/alexisTrejo11/Clinic-Vet-API/db/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAppoinments = `-- name: CountAppoinments :one
SELECT COUNT(*) FROM appoinments
WHERE deleted_at IS NULL
`

func (q *Queries) CountAppoinments(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAppoinments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppoinmentsByCustomerID = `-- name: CountAppoinmentsByCustomerID :one
SELECT COUNT(*) FROM appoinments
WHERE customer_id = $1
AND deleted_at IS NULL
`

func (q *Queries) CountAppoinmentsByCustomerID(ctx context.Context, customerID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAppoinmentsByCustomerID, customerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppoinmentsByDateRange = `-- name: CountAppoinmentsByDateRange :one
SELECT COUNT(*) FROM appoinments
WHERE schedule_date BETWEEN $1 AND $2
AND deleted_at IS NULL
`

type CountAppoinmentsByDateRangeParams struct {
	ScheduleDate   pgtype.Timestamptz
	ScheduleDate_2 pgtype.Timestamptz
}

func (q *Queries) CountAppoinmentsByDateRange(ctx context.Context, arg CountAppoinmentsByDateRangeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAppoinmentsByDateRange, arg.ScheduleDate, arg.ScheduleDate_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppoinmentsByEmployeeID = `-- name: CountAppoinmentsByEmployeeID :one
SELECT COUNT(*) FROM appoinments
WHERE employee_id = $1
AND deleted_at IS NULL
`

func (q *Queries) CountAppoinmentsByEmployeeID(ctx context.Context, employeeID pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, countAppoinmentsByEmployeeID, employeeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppoinmentsByPetID = `-- name: CountAppoinmentsByPetID :one
SELECT COUNT(*) FROM appoinments
WHERE pet_id = $1
AND deleted_at IS NULL
`

func (q *Queries) CountAppoinmentsByPetID(ctx context.Context, petID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countAppoinmentsByPetID, petID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAppoinmentsByStatus = `-- name: CountAppoinmentsByStatus :one
SELECT COUNT(*) FROM appoinments
WHERE status = $1
AND deleted_at IS NULL
`

func (q *Queries) CountAppoinmentsByStatus(ctx context.Context, status models.AppointmentStatus) (int64, error) {
	row := q.db.QueryRow(ctx, countAppoinmentsByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAppoinment = `-- name: CreateAppoinment :one
INSERT INTO appoinments (
    clinic_service, 
    schedule_date, 
    status, 
    reason, 
    notes, 
    customer_id, 
    employee_id,
    pet_id,
    created_at,
    updated_at,
    deleted_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL
) RETURNING id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at
`

type CreateAppoinmentParams struct {
	ClinicService models.ClinicService
	ScheduleDate  pgtype.Timestamptz
	Status        models.AppointmentStatus
	Reason        string
	Notes         pgtype.Text
	CustomerID    int32
	EmployeeID    pgtype.Int4
	PetID         int32
}

func (q *Queries) CreateAppoinment(ctx context.Context, arg CreateAppoinmentParams) (Appoinment, error) {
	row := q.db.QueryRow(ctx, createAppoinment,
		arg.ClinicService,
		arg.ScheduleDate,
		arg.Status,
		arg.Reason,
		arg.Notes,
		arg.CustomerID,
		arg.EmployeeID,
		arg.PetID,
	)
	var i Appoinment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAppoinment = `-- name: DeleteAppoinment :exec
UPDATE appoinments SET
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteAppoinment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAppoinment, id)
	return err
}

const getAppoinmentByID = `-- name: GetAppoinmentByID :one
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments 
WHERE id = $1 
AND deleted_at IS NULL
`

func (q *Queries) GetAppoinmentByID(ctx context.Context, id int32) (Appoinment, error) {
	row := q.db.QueryRow(ctx, getAppoinmentByID, id)
	var i Appoinment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAppointmentByIDAndCustomerID = `-- name: GetAppointmentByIDAndCustomerID :one
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments 
WHERE id = $1 
AND customer_id = $2
AND deleted_at IS NULL
`

type GetAppointmentByIDAndCustomerIDParams struct {
	ID         int32
	CustomerID int32
}

func (q *Queries) GetAppointmentByIDAndCustomerID(ctx context.Context, arg GetAppointmentByIDAndCustomerIDParams) (Appoinment, error) {
	row := q.db.QueryRow(ctx, getAppointmentByIDAndCustomerID, arg.ID, arg.CustomerID)
	var i Appoinment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAppointmentByIDAndEmployeeID = `-- name: GetAppointmentByIDAndEmployeeID :one
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments 
WHERE id = $1 
AND employee_id = $2
AND deleted_at IS NULL
`

type GetAppointmentByIDAndEmployeeIDParams struct {
	ID         int32
	EmployeeID pgtype.Int4
}

func (q *Queries) GetAppointmentByIDAndEmployeeID(ctx context.Context, arg GetAppointmentByIDAndEmployeeIDParams) (Appoinment, error) {
	row := q.db.QueryRow(ctx, getAppointmentByIDAndEmployeeID, arg.ID, arg.EmployeeID)
	var i Appoinment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAppoinments = `-- name: ListAppoinments :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments 
WHERE deleted_at IS NULL 
ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListAppoinmentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAppoinments(ctx context.Context, arg ListAppoinmentsParams) ([]Appoinment, error) {
	rows, err := q.db.Query(ctx, listAppoinments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appoinment
	for rows.Next() {
		var i Appoinment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppoinmentsByCustomerID = `-- name: ListAppoinmentsByCustomerID :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments 
WHERE customer_id = $1
AND deleted_at IS NULL
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListAppoinmentsByCustomerIDParams struct {
	CustomerID int32
	Limit      int32
	Offset     int32
}

func (q *Queries) ListAppoinmentsByCustomerID(ctx context.Context, arg ListAppoinmentsByCustomerIDParams) ([]Appoinment, error) {
	rows, err := q.db.Query(ctx, listAppoinmentsByCustomerID, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appoinment
	for rows.Next() {
		var i Appoinment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppoinmentsByDateRange = `-- name: ListAppoinmentsByDateRange :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments
WHERE schedule_date BETWEEN $1 AND $2
AND deleted_at IS NULL
ORDER BY schedule_date DESC LIMIT $3 OFFSET $4
`

type ListAppoinmentsByDateRangeParams struct {
	ScheduleDate   pgtype.Timestamptz
	ScheduleDate_2 pgtype.Timestamptz
	Limit          int32
	Offset         int32
}

func (q *Queries) ListAppoinmentsByDateRange(ctx context.Context, arg ListAppoinmentsByDateRangeParams) ([]Appoinment, error) {
	rows, err := q.db.Query(ctx, listAppoinmentsByDateRange,
		arg.ScheduleDate,
		arg.ScheduleDate_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appoinment
	for rows.Next() {
		var i Appoinment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppoinmentsByEmployeeID = `-- name: ListAppoinmentsByEmployeeID :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments
WHERE employee_id = $1
AND deleted_at IS NULL
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListAppoinmentsByEmployeeIDParams struct {
	EmployeeID pgtype.Int4
	Limit      int32
	Offset     int32
}

func (q *Queries) ListAppoinmentsByEmployeeID(ctx context.Context, arg ListAppoinmentsByEmployeeIDParams) ([]Appoinment, error) {
	rows, err := q.db.Query(ctx, listAppoinmentsByEmployeeID, arg.EmployeeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appoinment
	for rows.Next() {
		var i Appoinment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppoinmentsByPetID = `-- name: ListAppoinmentsByPetID :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments
WHERE pet_id = $1
AND deleted_at IS NULL
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListAppoinmentsByPetIDParams struct {
	PetID  int32
	Limit  int32
	Offset int32
}

func (q *Queries) ListAppoinmentsByPetID(ctx context.Context, arg ListAppoinmentsByPetIDParams) ([]Appoinment, error) {
	rows, err := q.db.Query(ctx, listAppoinmentsByPetID, arg.PetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appoinment
	for rows.Next() {
		var i Appoinment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppoinmentsByStatus = `-- name: ListAppoinmentsByStatus :many
SELECT id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at FROM appoinments
WHERE status = $1
AND deleted_at IS NULL
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListAppoinmentsByStatusParams struct {
	Status models.AppointmentStatus
	Limit  int32
	Offset int32
}

func (q *Queries) ListAppoinmentsByStatus(ctx context.Context, arg ListAppoinmentsByStatusParams) ([]Appoinment, error) {
	rows, err := q.db.Query(ctx, listAppoinmentsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appoinment
	for rows.Next() {
		var i Appoinment
		if err := rows.Scan(
			&i.ID,
			&i.ClinicService,
			&i.ScheduleDate,
			&i.Status,
			&i.Reason,
			&i.Notes,
			&i.CustomerID,
			&i.PetID,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppoinment = `-- name: UpdateAppoinment :one
UPDATE appoinments SET
    clinic_service = $2,
    schedule_date = $3,
    status = $4,
    reason = $5,
    notes = $6,
    customer_id = $7,
    employee_id = $8,
    pet_id = $9,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, clinic_service, schedule_date, status, reason, notes, customer_id, pet_id, employee_id, created_at, updated_at, deleted_at
`

type UpdateAppoinmentParams struct {
	ID            int32
	ClinicService models.ClinicService
	ScheduleDate  pgtype.Timestamptz
	Status        models.AppointmentStatus
	Reason        string
	Notes         pgtype.Text
	CustomerID    int32
	EmployeeID    pgtype.Int4
	PetID         int32
}

func (q *Queries) UpdateAppoinment(ctx context.Context, arg UpdateAppoinmentParams) (Appoinment, error) {
	row := q.db.QueryRow(ctx, updateAppoinment,
		arg.ID,
		arg.ClinicService,
		arg.ScheduleDate,
		arg.Status,
		arg.Reason,
		arg.Notes,
		arg.CustomerID,
		arg.EmployeeID,
		arg.PetID,
	)
	var i Appoinment
	err := row.Scan(
		&i.ID,
		&i.ClinicService,
		&i.ScheduleDate,
		&i.Status,
		&i.Reason,
		&i.Notes,
		&i.CustomerID,
		&i.PetID,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
