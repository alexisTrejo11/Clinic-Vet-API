// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: employee.sql

package sqlc

import (
	"context"

	"clinic-vet-api/db/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const countActiveEmployees = `-- name: CountActiveEmployees :one
SELECT COUNT(*) FROM employees
WHERE is_active = TRUE AND deleted_at IS NULL
`

func (q *Queries) CountActiveEmployees(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveEmployees)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllEmployees = `-- name: CountAllEmployees :one
SELECT COUNT(*) FROM employees
WHERE deleted_at IS NULL
`

func (q *Queries) CountAllEmployees(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllEmployees)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countEmployeesBySpeciality = `-- name: CountEmployeesBySpeciality :one
SELECT COUNT(*) FROM employees
WHERE speciality = $1 AND deleted_at IS NULL
`

func (q *Queries) CountEmployeesBySpeciality(ctx context.Context, speciality models.VeterinarianSpeciality) (int64, error) {
	row := q.db.QueryRow(ctx, countEmployeesBySpeciality, speciality)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (
    first_name, last_name, photo, license_number, speciality,
    years_of_experience, is_active, user_id, schedule_json
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9::jsonb
)
RETURNING id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at
`

type CreateEmployeeParams struct {
	FirstName         string
	LastName          string
	Photo             string
	LicenseNumber     string
	Speciality        models.VeterinarianSpeciality
	YearsOfExperience int32
	IsActive          bool
	UserID            pgtype.Int4
	Column9           []byte
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Photo,
		arg.LicenseNumber,
		arg.Speciality,
		arg.YearsOfExperience,
		arg.IsActive,
		arg.UserID,
		arg.Column9,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.LicenseNumber,
		&i.Speciality,
		&i.YearsOfExperience,
		&i.IsActive,
		&i.UserID,
		&i.ScheduleJson,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const existsEmployeeByID = `-- name: ExistsEmployeeByID :one
SELECT COUNT(*) > 0 FROM employees
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) ExistsEmployeeByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsEmployeeByID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const existsEmployeeByUserID = `-- name: ExistsEmployeeByUserID :one
SELECT COUNT(*) > 0 FROM employees
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) ExistsEmployeeByUserID(ctx context.Context, userID pgtype.Int4) (bool, error) {
	row := q.db.QueryRow(ctx, existsEmployeeByUserID, userID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findActiveEmployees = `-- name: FindActiveEmployees :many
SELECT id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at FROM employees
WHERE is_active = TRUE AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FindActiveEmployeesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindActiveEmployees(ctx context.Context, arg FindActiveEmployeesParams) ([]Employee, error) {
	rows, err := q.db.Query(ctx, findActiveEmployees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Photo,
			&i.LicenseNumber,
			&i.Speciality,
			&i.YearsOfExperience,
			&i.IsActive,
			&i.UserID,
			&i.ScheduleJson,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEmployeeByID = `-- name: FindEmployeeByID :one
SELECT id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at FROM employees
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) FindEmployeeByID(ctx context.Context, id int32) (Employee, error) {
	row := q.db.QueryRow(ctx, findEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.LicenseNumber,
		&i.Speciality,
		&i.YearsOfExperience,
		&i.IsActive,
		&i.UserID,
		&i.ScheduleJson,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findEmployeeByUserID = `-- name: FindEmployeeByUserID :one
SELECT id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at FROM employees
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) FindEmployeeByUserID(ctx context.Context, userID pgtype.Int4) (Employee, error) {
	row := q.db.QueryRow(ctx, findEmployeeByUserID, userID)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.LicenseNumber,
		&i.Speciality,
		&i.YearsOfExperience,
		&i.IsActive,
		&i.UserID,
		&i.ScheduleJson,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findEmployees = `-- name: FindEmployees :many
SELECT id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at FROM employees
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FindEmployeesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindEmployees(ctx context.Context, arg FindEmployeesParams) ([]Employee, error) {
	rows, err := q.db.Query(ctx, findEmployees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Photo,
			&i.LicenseNumber,
			&i.Speciality,
			&i.YearsOfExperience,
			&i.IsActive,
			&i.UserID,
			&i.ScheduleJson,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEmployeesBySpeciality = `-- name: FindEmployeesBySpeciality :many
SELECT id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at FROM employees
WHERE speciality = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type FindEmployeesBySpecialityParams struct {
	Speciality models.VeterinarianSpeciality
	Limit      int32
	Offset     int32
}

func (q *Queries) FindEmployeesBySpeciality(ctx context.Context, arg FindEmployeesBySpecialityParams) ([]Employee, error) {
	rows, err := q.db.Query(ctx, findEmployeesBySpeciality, arg.Speciality, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Photo,
			&i.LicenseNumber,
			&i.Speciality,
			&i.YearsOfExperience,
			&i.IsActive,
			&i.UserID,
			&i.ScheduleJson,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hardDeleteEmployee = `-- name: HardDeleteEmployee :exec
DELETE FROM employees WHERE id = $1
`

func (q *Queries) HardDeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, hardDeleteEmployee, id)
	return err
}

const softDeleteEmployee = `-- name: SoftDeleteEmployee :exec
UPDATE employees
SET
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP,
    is_active = FALSE
WHERE id = $1
`

func (q *Queries) SoftDeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteEmployee, id)
	return err
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employees
SET
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    photo = COALESCE($4, photo),
    license_number = COALESCE($5, license_number),
    speciality = COALESCE($6, speciality),
    years_of_experience = COALESCE($7, years_of_experience),
    is_active = COALESCE($8, is_active),
    user_id = COALESCE($9, user_id),
    schedule_json = COALESCE($10::jsonb, schedule_json),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, first_name, last_name, photo, license_number, speciality, years_of_experience, is_active, user_id, schedule_json, created_at, updated_at, deleted_at
`

type UpdateEmployeeParams struct {
	ID                int32
	FirstName         string
	LastName          string
	Photo             string
	LicenseNumber     string
	Speciality        models.VeterinarianSpeciality
	YearsOfExperience int32
	IsActive          bool
	UserID            pgtype.Int4
	Column10          []byte
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployee,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Photo,
		arg.LicenseNumber,
		arg.Speciality,
		arg.YearsOfExperience,
		arg.IsActive,
		arg.UserID,
		arg.Column10,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Photo,
		&i.LicenseNumber,
		&i.Speciality,
		&i.YearsOfExperience,
		&i.IsActive,
		&i.UserID,
		&i.ScheduleJson,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
