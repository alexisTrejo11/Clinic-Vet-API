// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    amount,
    currency,
    status,
    method,
    transaction_id,
    description,
    duedate,
    paid_at,
    refunded_at,
    user_id,
    is_active,
    created_at,
    updated_at,
    deleted_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    TRUE,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    NULL
) RETURNING id, amount, currency, status, method, transaction_id, description, duedate, paid_at, refunded_at, is_active, created_at, updated_at, deleted_at, user_id
`

type CreatePaymentParams struct {
	Amount        pgtype.Numeric
	Currency      string
	Status        interface{}
	Method        interface{}
	TransactionID pgtype.Text
	Description   pgtype.Text
	Duedate       pgtype.Timestamptz
	PaidAt        pgtype.Timestamptz
	RefundedAt    pgtype.Timestamptz
	UserID        int32
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Method,
		arg.TransactionID,
		arg.Description,
		arg.Duedate,
		arg.PaidAt,
		arg.RefundedAt,
		arg.UserID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Method,
		&i.TransactionID,
		&i.Description,
		&i.Duedate,
		&i.PaidAt,
		&i.RefundedAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const getPaymentById = `-- name: GetPaymentById :one
SELECT id, amount, currency, status, method, transaction_id, description, duedate, paid_at, refunded_at, is_active, created_at, updated_at, deleted_at, user_id
FROM payments
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPaymentById(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentById, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Method,
		&i.TransactionID,
		&i.Description,
		&i.Duedate,
		&i.PaidAt,
		&i.RefundedAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const getPaymentByTransactionId = `-- name: GetPaymentByTransactionId :one
SELECT id, amount, currency, status, method, transaction_id, description, duedate, paid_at, refunded_at, is_active, created_at, updated_at, deleted_at, user_id
FROM payments
WHERE transaction_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPaymentByTransactionId(ctx context.Context, transactionID pgtype.Text) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByTransactionId, transactionID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Method,
		&i.TransactionID,
		&i.Description,
		&i.Duedate,
		&i.PaidAt,
		&i.RefundedAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const listOverduePayments = `-- name: ListOverduePayments :many
SELECT id, amount, currency, status, method, transaction_id, description, duedate, paid_at, refunded_at, is_active, created_at, updated_at, deleted_at, user_id
FROM payments
WHERE duedate < CURRENT_TIMESTAMP AND status != 'paid' AND deleted_at IS NULL
ORDER BY duedate ASC
LIMIT $1 OFFSET $2
`

type ListOverduePaymentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListOverduePayments(ctx context.Context, arg ListOverduePaymentsParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listOverduePayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Method,
			&i.TransactionID,
			&i.Description,
			&i.Duedate,
			&i.PaidAt,
			&i.RefundedAt,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsByDateRange = `-- name: ListPaymentsByDateRange :many
SELECT id, amount, currency, status, method, transaction_id, description, duedate, paid_at, refunded_at, is_active, created_at, updated_at, deleted_at, user_id
FROM payments
WHERE created_at BETWEEN $1 AND $2 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListPaymentsByDateRangeParams struct {
	CreatedAt   pgtype.Timestamptz
	CreatedAt_2 pgtype.Timestamptz
	Limit       int32
	Offset      int32
}

func (q *Queries) ListPaymentsByDateRange(ctx context.Context, arg ListPaymentsByDateRangeParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByDateRange,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Method,
			&i.TransactionID,
			&i.Description,
			&i.Duedate,
			&i.PaidAt,
			&i.RefundedAt,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsByStatus = `-- name: ListPaymentsByStatus :many
SELECT id, amount, currency, status, method, transaction_id, description, duedate, paid_at, refunded_at, is_active, created_at, updated_at, deleted_at, user_id
FROM payments
WHERE status = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPaymentsByStatusParams struct {
	Status interface{}
	Limit  int32
	Offset int32
}

func (q *Queries) ListPaymentsByStatus(ctx context.Context, arg ListPaymentsByStatusParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Method,
			&i.TransactionID,
			&i.Description,
			&i.Duedate,
			&i.PaidAt,
			&i.RefundedAt,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsByUserId = `-- name: ListPaymentsByUserId :many
SELECT id, amount, currency, status, method, transaction_id, description, duedate, paid_at, refunded_at, is_active, created_at, updated_at, deleted_at, user_id
FROM payments
WHERE user_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPaymentsByUserIdParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

func (q *Queries) ListPaymentsByUserId(ctx context.Context, arg ListPaymentsByUserIdParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Method,
			&i.TransactionID,
			&i.Description,
			&i.Duedate,
			&i.PaidAt,
			&i.RefundedAt,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeletePayment = `-- name: SoftDeletePayment :exec
UPDATE payments
SET
    is_active = FALSE,
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND is_active = TRUE
`

func (q *Queries) SoftDeletePayment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeletePayment, id)
	return err
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments
SET
    amount = $1,
    currency = $2,
    status = $3,
    method = $4,
    transaction_id = $5,
    description = $6,
    duedate = $7,
    paid_at = $8,
    refunded_at = $9,
    is_active = $10,
    user_id = $11,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $12
RETURNING id, amount, currency, status, method, transaction_id, description, duedate, paid_at, refunded_at, is_active, created_at, updated_at, deleted_at, user_id
`

type UpdatePaymentParams struct {
	Amount        pgtype.Numeric
	Currency      string
	Status        interface{}
	Method        interface{}
	TransactionID pgtype.Text
	Description   pgtype.Text
	Duedate       pgtype.Timestamptz
	PaidAt        pgtype.Timestamptz
	RefundedAt    pgtype.Timestamptz
	IsActive      bool
	UserID        int32
	ID            int32
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePayment,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Method,
		arg.TransactionID,
		arg.Description,
		arg.Duedate,
		arg.PaidAt,
		arg.RefundedAt,
		arg.IsActive,
		arg.UserID,
		arg.ID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Method,
		&i.TransactionID,
		&i.Description,
		&i.Duedate,
		&i.PaidAt,
		&i.RefundedAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}
