// Code generated by MockGen. DO NOT EDIT.
// Source: sqlc/querier.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sqlc "clinic-vet-api/sqlc"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockQuerier) ActivateUser(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateuserDomain.
func (mr *MockQuerierMockRecorder) ActivateUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockQuerier)(nil).ActivateUser), ctx, id)
}

// Createcustomer mocks base method.
func (m *MockQuerier) Createcustomer(ctx context.Context, arg sqlc.CreatecustomerParams) (sqlc.CreatecustomerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Createcustomer", ctx, arg)
	ret0, _ := ret[0].(sqlc.CreatecustomerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Createcustomer indicates an expected call of Createcustomer.
func (mr *MockQuerierMockRecorder) Createcustomer(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Createcustomer", reflect.TypeOf((*MockQuerier)(nil).Createcustomer), ctx, arg)
}

// CreatePet mocks base method.
func (m *MockQuerier) CreatePet(ctx context.Context, arg sqlc.CreatePetParams) (sqlc.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePet", ctx, arg)
	ret0, _ := ret[0].(sqlc.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePet indicates an expected call of CreatePet.
func (mr *MockQuerierMockRecorder) CreatePet(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePet", reflect.TypeOf((*MockQuerier)(nil).CreatePet), ctx, arg)
}

// CreateVeterinarian mocks base method.
func (m *MockQuerier) CreateVeterinarian(ctx context.Context, arg sqlc.CreateVeterinarianParams) (sqlc.Veterinarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVeterinarian", ctx, arg)
	ret0, _ := ret[0].(sqlc.Veterinarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVeterinarian indicates an expected call of CreateVeterinarian.
func (mr *MockQuerierMockRecorder) CreateVeterinarian(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVeterinarian", reflect.TypeOf((*MockQuerier)(nil).CreateVeterinarian), ctx, arg)
}

// DeactivateUser mocks base method.
func (m *MockQuerier) DeactivateUser(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateUser indicates an expected call of DeactivateuserDomain.
func (mr *MockQuerierMockRecorder) DeactivateUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUser", reflect.TypeOf((*MockQuerier)(nil).DeactivateUser), ctx, id)
}

// Deletecustomer mocks base method.
func (m *MockQuerier) Deletecustomer(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deletecustomer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deletecustomer indicates an expected call of Deletecustomer.
func (mr *MockQuerierMockRecorder) Deletecustomer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deletecustomer", reflect.TypeOf((*MockQuerier)(nil).Deletecustomer), ctx, id)
}

// DeletePet mocks base method.
func (m *MockQuerier) DeletePet(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePet indicates an expected call of DeletePet.
func (mr *MockQuerierMockRecorder) DeletePet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePet", reflect.TypeOf((*MockQuerier)(nil).DeletePet), ctx, id)
}

// ExistByID mocks base method.
func (m *MockQuerier) ExistByID(ctx context.Context, id int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistByID", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistByID indicates an expected call of ExistByID.
func (mr *MockQuerierMockRecorder) ExistByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistByID", reflect.TypeOf((*MockQuerier)(nil).ExistByID), ctx, id)
}

// ExistByPhoneNumber mocks base method.
func (m *MockQuerier) ExistByPhoneNumber(ctx context.Context, phoneNumber string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistByPhoneNumber indicates an expected call of ExistByPhoneNumber.
func (mr *MockQuerierMockRecorder) ExistByPhoneNumber(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistByPhoneNumber", reflect.TypeOf((*MockQuerier)(nil).ExistByPhoneNumber), ctx, phoneNumber)
}

// GetcustomerByID mocks base method.
func (m *MockQuerier) GetcustomerByID(ctx context.Context, id int32) (sqlc.GetcustomerByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetcustomerByID", ctx, id)
	ret0, _ := ret[0].(sqlc.GetcustomerByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetcustomerByID indicates an expected call of GetcustomerByID.
func (mr *MockQuerierMockRecorder) GetcustomerByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetcustomerByID", reflect.TypeOf((*MockQuerier)(nil).GetcustomerByID), ctx, id)
}

// GetcustomerByPhone mocks base method.
func (m *MockQuerier) GetcustomerByPhone(ctx context.Context, phoneNumber string) (sqlc.GetcustomerByPhoneRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetcustomerByPhone", ctx, phoneNumber)
	ret0, _ := ret[0].(sqlc.GetcustomerByPhoneRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetcustomerByPhone indicates an expected call of GetcustomerByPhone.
func (mr *MockQuerierMockRecorder) GetcustomerByPhone(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetcustomerByPhone", reflect.TypeOf((*MockQuerier)(nil).GetcustomerByPhone), ctx, phoneNumber)
}

// GetcustomerByUserID mocks base method.
func (m *MockQuerier) GetcustomerByUserID(ctx context.Context, userID pgtype.Int4) (sqlc.GetcustomerByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetcustomerByUserID", ctx, userID)
	ret0, _ := ret[0].(sqlc.GetcustomerByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetcustomerByUserID indicates an expected call of GetcustomerByUserID.
func (mr *MockQuerierMockRecorder) GetcustomerByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetcustomerByUserID", reflect.TypeOf((*MockQuerier)(nil).GetcustomerByUserID), ctx, userID)
}

// GetPetByID mocks base method.
func (m *MockQuerier) GetPetByID(ctx context.Context, id int32) (sqlc.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetByID", ctx, id)
	ret0, _ := ret[0].(sqlc.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetByID indicates an expected call of GetPetByID.
func (mr *MockQuerierMockRecorder) GetPetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetByID", reflect.TypeOf((*MockQuerier)(nil).GetPetByID), ctx, id)
}

// GetPetsBycustomerID mocks base method.
func (m *MockQuerier) GetPetsBycustomerID(ctx context.Context, customerID int32) ([]sqlc.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetsBycustomerID", ctx, customerID)
	ret0, _ := ret[0].([]sqlc.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetsBycustomerID indicates an expected call of GetPetsBycustomerID.
func (mr *MockQuerierMockRecorder) GetPetsBycustomerID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetsBycustomerID", reflect.TypeOf((*MockQuerier)(nil).GetPetsBycustomerID), ctx, customerID)
}

// GetVeterinarianById mocks base method.
func (m *MockQuerier) GetVeterinarianById(ctx context.Context, id int32) (sqlc.Veterinarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVeterinarianById", ctx, id)
	ret0, _ := ret[0].(sqlc.Veterinarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVeterinarianById indicates an expected call of GetVeterinarianById.
func (mr *MockQuerierMockRecorder) GetVeterinarianById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVeterinarianById", reflect.TypeOf((*MockQuerier)(nil).GetVeterinarianById), ctx, id)
}

// Listcustomers mocks base method.
func (m *MockQuerier) Listcustomers(ctx context.Context, arg sqlc.ListcustomersParams) ([]sqlc.ListcustomersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listcustomers", ctx, arg)
	ret0, _ := ret[0].([]sqlc.ListcustomersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listcustomers indicates an expected call of Listcustomers.
func (mr *MockQuerierMockRecorder) Listcustomers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listcustomers", reflect.TypeOf((*MockQuerier)(nil).Listcustomers), ctx, arg)
}

// ListPets mocks base method.
func (m *MockQuerier) ListPets(ctx context.Context) ([]sqlc.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPets", ctx)
	ret0, _ := ret[0].([]sqlc.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPets indicates an expected call of ListPets.
func (mr *MockQuerierMockRecorder) ListPets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPets", reflect.TypeOf((*MockQuerier)(nil).ListPets), ctx)
}

// ListVeterinarians mocks base method.
func (m *MockQuerier) ListVeterinarians(ctx context.Context, arg sqlc.ListVeterinariansParams) ([]sqlc.Veterinarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVeterinarians", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Veterinarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVeterinarians indicates an expected call of ListVeterinarians.
func (mr *MockQuerierMockRecorder) ListVeterinarians(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVeterinarians", reflect.TypeOf((*MockQuerier)(nil).ListVeterinarians), ctx, arg)
}

// SoftDeleteVeterinarian mocks base method.
func (m *MockQuerier) SoftDeleteVeterinarian(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteVeterinarian", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteVeterinarian indicates an expected call of SoftDeleteVeterinarian.
func (mr *MockQuerierMockRecorder) SoftDeleteVeterinarian(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteVeterinarian", reflect.TypeOf((*MockQuerier)(nil).SoftDeleteVeterinarian), ctx, id)
}

// Updatecustomer mocks base method.
func (m *MockQuerier) Updatecustomer(ctx context.Context, arg sqlc.UpdatecustomerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updatecustomer", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Updatecustomer indicates an expected call of Updatecustomer.
func (mr *MockQuerierMockRecorder) Updatecustomer(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updatecustomer", reflect.TypeOf((*MockQuerier)(nil).Updatecustomer), ctx, arg)
}

// UpdatePet mocks base method.
func (m *MockQuerier) UpdatePet(ctx context.Context, arg sqlc.UpdatePetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePet", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePet indicates an expected call of UpdatePet.
func (mr *MockQuerierMockRecorder) UpdatePet(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePet", reflect.TypeOf((*MockQuerier)(nil).UpdatePet), ctx, arg)
}

// UpdateVeterinarian mocks base method.
func (m *MockQuerier) UpdateVeterinarian(ctx context.Context, arg sqlc.UpdateVeterinarianParams) (sqlc.Veterinarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVeterinarian", ctx, arg)
	ret0, _ := ret[0].(sqlc.Veterinarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVeterinarian indicates an expected call of UpdateVeterinarian.
func (mr *MockQuerierMockRecorder) UpdateVeterinarian(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVeterinarian", reflect.TypeOf((*MockQuerier)(nil).UpdateVeterinarian), ctx, arg)
}

// WithTx mocks base method.
func (m *MockQuerier) WithTx(tx pgx.Tx) *sqlc.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(*sqlc.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockQuerierMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockQuerier)(nil).WithTx), tx)
}
