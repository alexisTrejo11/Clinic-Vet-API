basePath: /api/v2
definitions:
  apiResponse.APIResponse:
    description: Standardized API response structure.
    properties:
      data:
        description: The data payload of the response for successful requests.
      error:
        allOf:
        - $ref: '#/definitions/apiResponse.ErrorInfo'
        description: Details of the error if the request was not successful.
      meta:
        description: Additional metadata for the response, such as pagination info.
      request_id:
        description: A unique identifier for the request.
        type: string
      success:
        description: Indicates whether the request was successful.
        type: boolean
      timestamp:
        description: The timestamp when the response was generated.
        type: string
    type: object
  apiResponse.ErrorInfo:
    description: Detailed information about an error.
    properties:
      code:
        description: The error code.
        type: string
      details:
        additionalProperties: true
        description: A map of specific error details, often used for validation errors.
        type: object
      message:
        description: A descriptive error message.
        type: string
      stack:
        description: The error stack trace (for development purposes).
        type: string
      type:
        description: The type of the error.
        type: string
    type: object
  appointDomain.AppointmentStatus:
    enum:
    - pending
    - cancelled
    - completed
    - rescheduled
    - confirmed
    - not_presented
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusCancelled
    - StatusCompleted
    - StatusRescheduled
    - StatusConfirmed
    - StatusNotPresented
  appointDomain.ClinicService:
    enum:
    - general_consultation
    - vaccination
    - surgery
    - dental_care
    - emergency_care
    - grooming
    - nutrition_consult
    - behavior_consult
    - wellness_exam
    - other
    type: string
    x-enum-varnames:
    - ServiceGeneralConsultation
    - ServiceVaccination
    - ServiceSurgery
    - ServiceDentalCare
    - ServiceEmergencyCare
    - ServiceGrooming
    - ServiceNutritionConsult
    - ServiceBehaviorConsult
    - ServiceWellnessExam
    - ServiceOther
  appointmentCmd.CreateAppointmentCommand:
    properties:
      date_time:
        type: string
      is_emergency:
        type: boolean
      notes:
        type: string
      owner_id:
        type: integer
      pet_id:
        type: integer
      reason:
        type: string
      service:
        $ref: '#/definitions/appointDomain.ClinicService'
      status:
        $ref: '#/definitions/appointDomain.AppointmentStatus'
      vet_id:
        type: integer
    required:
    - date_time
    - owner_id
    - pet_id
    - reason
    - service
    type: object
  appointmentCmd.RescheduleAppointmentCommand:
    properties:
      date_time:
        type: string
      id:
        type: integer
      reason:
        type: string
    required:
    - date_time
    - id
    type: object
  appointmentCmd.UpdateAppointmentCommand:
    properties:
      appoinment_id:
        type: integer
      is_emergency:
        type: boolean
      notes:
        type: string
      reason:
        type: string
      service:
        $ref: '#/definitions/appointDomain.ClinicService'
      status:
        $ref: '#/definitions/appointDomain.AppointmentStatus'
      vet_id:
        type: integer
    required:
    - appoinment_id
    type: object
  appointmentController.CompleteAppointmentRequest:
    properties:
      notes:
        type: string
    type: object
  appointmentController.PaginationMetadata:
    properties:
      current_page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total_pages:
        example: 5
        type: integer
      total_records:
        example: 42
        type: integer
    type: object
  appointmentQuery.AppointmentResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_emergency:
        type: boolean
      notes:
        type: string
      owner_id:
        type: integer
      pet_id:
        type: integer
      reason:
        type: string
      scheduled_date:
        type: string
      service:
        $ref: '#/definitions/appointDomain.ClinicService'
      status:
        $ref: '#/definitions/appointDomain.AppointmentStatus'
      updated_at:
        type: string
      vet_id:
        type: integer
    type: object
  petController.PetInsertRequest:
    description: Represents the request body for creating a new pet.
    properties:
      age:
        description: The age of the pet in years. (optional)
        type: integer
      allergies:
        description: A list of the pet's known allergies. (optional, max 500)
        maxLength: 500
        type: string
      breed:
        description: The breed of the pet. (optional, min 2, max 50)
        maxLength: 50
        minLength: 2
        type: string
      color:
        description: The color of the pet's fur/coat. (optional, min 2, max 50)
        maxLength: 50
        minLength: 2
        type: string
      current_medications:
        description: The pet's current medications. (optional, max 500)
        maxLength: 500
        type: string
      gender:
        description: The gender of the pet. (optional, must be one of "Male", "Female",
          or "Unknown")
        enum:
        - Male
        - Female
        - Unknown
        type: string
      is_active:
        description: Indicates if the pet's record is active. (required)
        type: boolean
      is_neutered:
        description: Indicates if the pet is neutered. (optional)
        type: boolean
      microchip:
        description: The pet's microchip number. (optional, must be 15 digits)
        type: string
      name:
        description: The name of the pet. (required, min 2, max 100)
        maxLength: 100
        minLength: 2
        type: string
      owner_id:
        description: The unique ID of the pet's owner. (required, greater than 0)
        type: integer
      photo:
        description: The URL of the pet's photo. (optional, must be a valid URL)
        type: string
      special_needs:
        description: Any special needs the pet may have. (optional, max 500)
        maxLength: 500
        type: string
      species:
        description: The species of the pet. (required, min 2, max 50)
        maxLength: 50
        minLength: 2
        type: string
      weight:
        description: The weight of the pet in kilograms. (optional, greater than 0,
          less than or equal to 1000)
        maximum: 1000
        type: number
    required:
    - name
    - owner_id
    - species
    type: object
  petController.PetResponse:
    description: Represents the response structure for a pet.
    properties:
      age:
        description: The age of the pet in years.
        type: integer
      allergies:
        description: A list of the pet's known allergies.
        type: string
      breed:
        description: The breed of the pet.
        type: string
      color:
        description: The color of the pet's fur/coat.
        type: string
      created_at:
        description: The date and time when the pet's record was created.
        type: string
      current_medications:
        description: The pet's current medications.
        type: string
      gender:
        description: The gender of the pet.
        type: string
      id:
        description: The unique ID of the pet.
        type: integer
      is_active:
        description: Indicates if the pet's record is active.
        type: boolean
      is_neutered:
        description: Indicates if the pet is neutered.
        type: boolean
      microchip:
        description: The pet's microchip number.
        type: string
      name:
        description: The name of the pet.
        type: string
      owner_id:
        description: The unique ID of the pet's owner.
        type: integer
      photo:
        description: The URL of the pet's photo.
        type: string
      special_needs:
        description: Any special needs the pet may have.
        type: string
      species:
        description: The species of the pet.
        type: string
      updated_at:
        description: The date and time when the pet's record was last updated.
        type: string
      weight:
        description: The weight of the pet in kilograms.
        type: number
    type: object
  shared.Money:
    type: object
  userDtos.CreateUserRequest:
    description: Represents the request body for creating a new userDomain.
    properties:
      address:
        description: The user's address. (required)
        type: string
      date_of_birth:
        description: The user's date of birth. (required)
        type: string
      email:
        description: The user's email address. (required, must be a valid email format)
        type: string
      gender:
        description: The user's gender. (required, must be "male", "female", or "other")
        enum:
        - male
        type: string
      location:
        description: The user's location. (required)
        type: string
      owner_id:
        description: The unique ID of the owner. (required)
        type: integer
      password:
        description: The user's password. (required, minimum 8 characters)
        minLength: 8
        type: string
      phone_number:
        description: The user's phone number. (required)
        type: string
      role:
        description: The role of the user (e.g., "customer", "veterinarian", "admin").
          (required)
        enum:
        - customer
        - veterinarian
        - admin
        type: string
      veterinarian_id:
        description: The unique ID of the veterinarian. (optional)
        type: integer
    required:
    - address
    - date_of_birth
    - email
    - gender
    - location
    - owner_id
    - password
    - phone_number
    - role
    type: object
  vetDomain.VetSpecialty:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    - 15
    - 16
    - 17
    - 18
    - 19
    - 20
    type: integer
    x-enum-comments:
      AnesthesiologySpecialty: "12"
      AvianMedicineSpecialty: "17"
      CardiologySpecialty: "7"
      DentistrySpecialty: "4"
      DermatologySpecialty: "5"
      EmergencyCriticalCareSpecialty: "11"
      EquineMedicineSpecialty: "16"
      ExoticAnimalMedicineSpecialty: "15"
      FoodAnimalMedicineSpecialty: "19"
      GeneralPracticeSpecialty: "1"
      InternalMedicineSpecialty: "3"
      NeurologySpecialty: "8"
      OncologySpecialty: "6"
      OphthalmologySpecialty: "9"
      PathologySpecialty: "13"
      PreventiveMedicineSpecialty: "14"
      PublicHealthSpecialty: "20"
      RadiologySpecialty: "10"
      SurgerySpecialty: "2"
      UnknownSpecialty: "0"
      ZooAnimalMedicineSpecialty: "18"
    x-enum-descriptions:
    - "0"
    - "1"
    - "2"
    - "3"
    - "4"
    - "5"
    - "6"
    - "7"
    - "8"
    - "9"
    - "10"
    - "11"
    - "12"
    - "13"
    - "14"
    - "15"
    - "16"
    - "17"
    - "18"
    - "19"
    - "20"
    x-enum-varnames:
    - UnknownSpecialty
    - GeneralPracticeSpecialty
    - SurgerySpecialty
    - InternalMedicineSpecialty
    - DentistrySpecialty
    - DermatologySpecialty
    - OncologySpecialty
    - CardiologySpecialty
    - NeurologySpecialty
    - OphthalmologySpecialty
    - RadiologySpecialty
    - EmergencyCriticalCareSpecialty
    - AnesthesiologySpecialty
    - PathologySpecialty
    - PreventiveMedicineSpecialty
    - ExoticAnimalMedicineSpecialty
    - EquineMedicineSpecialty
    - AvianMedicineSpecialty
    - ZooAnimalMedicineSpecialty
    - FoodAnimalMedicineSpecialty
    - PublicHealthSpecialty
  vetDtos.ScheduleInsert:
    properties:
      day:
        description: The day of the week for the schedule. (e.g., "Monday", "Tuesday")
        type: string
      departure_time:
        description: The departure time of the work day in hours.
        type: integer
      end_break:
        description: The end time of the break in hours.
        type: integer
      entry_time:
        description: The start time of the work day in hours (e.g., 8 for 8:00 AM).
        type: integer
      start_break:
        description: The start time of the break in hours.
        type: integer
    type: object
  vetDtos.VetCreate:
    properties:
      consultation_fee:
        allOf:
        - $ref: '#/definitions/shared.Money'
        description: The fee for a consultation.
      first_name:
        description: The veterinarian's first name.
        type: string
      is_active:
        description: Indicates if the veterinarian is currently active.
        type: boolean
      laboral_schedule:
        description: The working schedule of the veterinarian.
        items:
          $ref: '#/definitions/vetDtos.ScheduleInsert'
        type: array
      last_name:
        description: The veterinarian's last name.
        type: string
      license_number:
        description: The unique license number of the veterinarian.
        type: string
      photo:
        description: URL for the veterinarian's photo.
        type: string
      specialty:
        allOf:
        - $ref: '#/definitions/vetDomain.VetSpecialty'
        description: The veterinarian's medical specialty.
      years_experience:
        description: The number of years of professional experience.
        type: integer
    required:
    - first_name
    - last_name
    - license_number
    type: object
  vetDtos.VetResponse:
    description: Represents the response structure for a veterinarian.
    properties:
      consultation_fee:
        allOf:
        - $ref: '#/definitions/shared.Money'
        description: The consultation fee charged by the veterinarian.
      first_name:
        description: The first name of the veterinarian.
        type: string
      id:
        description: The unique ID of the veterinarian.
        type: integer
      laboral_schedule:
        description: The working schedule of the veterinarian.
        items:
          $ref: '#/definitions/vetDtos.ScheduleInsert'
        type: array
      last_name:
        description: The last name of the veterinarian.
        type: string
      license_number:
        description: The license number of the veterinarian.
        type: string
      photo:
        description: The URL of the veterinarian's photo.
        type: string
      specialty:
        description: The specialty of the veterinarian.
        type: string
      years_experience:
        description: The years of experience of the veterinarian.
        type: integer
    type: object
  vetDtos.VetUpdate:
    properties:
      consultation_fee:
        allOf:
        - $ref: '#/definitions/shared.Money'
        description: The fee for a consultation.
      first_name:
        description: The veterinarian's first name.
        type: string
      is_active:
        description: Indicates if the veterinarian is currently active.
        type: boolean
      laboral_schedule:
        description: The working schedule of the veterinarian.
        items:
          $ref: '#/definitions/vetDtos.ScheduleInsert'
        type: array
      last_name:
        description: The veterinarian's last name.
        type: string
      license_number:
        description: The unique license number of the veterinarian.
        type: string
      photo:
        description: URL for the veterinarian's photo.
        type: string
      specialty:
        allOf:
        - $ref: '#/definitions/vetDomain.VetSpecialty'
        description: The veterinarian's medical specialty.
      years_experience:
        description: The number of years of professional experience.
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: Equipo de Soporte API
    url: http://www.swagger.io/support
  description: Esta es la documentación para la API de la clínica veterinaria.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API Clínica Veterinaria
  version: "1.0"
paths:
  /appointments:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of all appointments
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page_number
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of appointments
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/appointmentQuery.AppointmentResponse'
                  type: array
                metadata:
                  $ref: '#/definitions/appointmentController.PaginationMetadata'
              type: object
        "400":
          description: Invalid pagination parameters
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get all appointments
      tags:
      - appointments-query
    post:
      consumes:
      - application/json
      description: Creates a new appointment for a pet with a veterinarian
      parameters:
      - description: Appointment details
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/appointmentCmd.CreateAppointmentCommand'
      produces:
      - application/json
      responses:
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Business rule validation failed
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Create a new veterinary appointment
      tags:
      - appointments
  /appointments/{id}:
    delete:
      consumes:
      - application/json
      description: Removes an appointment from the system
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Invalid appointment ID
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Cannot delete appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Delete an appointment
      tags:
      - appointments
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific appointment
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Appointment details
          schema:
            $ref: '#/definitions/appointmentQuery.AppointmentResponse'
        "400":
          description: Invalid appointment ID
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get appointment by ID
      tags:
      - appointments-query
    put:
      consumes:
      - application/json
      description: Updates the details of an existing veterinary appointment
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated appointment details
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/appointmentCmd.UpdateAppointmentCommand'
      produces:
      - application/json
      responses:
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Business rule validation failed
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Update an existing appointment
      tags:
      - appointments
  /appointments/{id}/complete:
    put:
      consumes:
      - application/json
      description: Marks an appointment as completed and adds optional notes
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Completion notes
        in: body
        name: notes
        required: true
        schema:
          $ref: '#/definitions/appointmentController.CompleteAppointmentRequest'
      produces:
      - application/json
      responses:
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "401":
          description: Unauthorized - Veterinarian not authenticated
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "403":
          description: Forbidden - Not assigned to this appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Cannot complete appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      security:
      - BearerAuth: []
      summary: Complete an appointment
      tags:
      - appointments
  /appointments/{id}/confirm:
    put:
      consumes:
      - application/json
      description: Confirms an appointment by a veterinarian
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Invalid appointment ID
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "401":
          description: Unauthorized - Veterinarian not authenticated
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "403":
          description: Forbidden - Not assigned to this appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Cannot confirm appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      security:
      - BearerAuth: []
      summary: Confirm an appointment
      tags:
      - appointments
  /appointments/{id}/no-show:
    put:
      consumes:
      - application/json
      description: Marks an appointment as no-show when the client doesn't attend
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Invalid appointment ID
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Cannot mark as no-show
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Mark appointment as no-show
      tags:
      - appointments
  /appointments/{id}/reschedule:
    put:
      consumes:
      - application/json
      description: Changes the date and time of an existing appointment
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: New appointment time details
        in: body
        name: reschedule
        required: true
        schema:
          $ref: '#/definitions/appointmentCmd.RescheduleAppointmentCommand'
      produces:
      - application/json
      responses:
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Invalid time slot or scheduling conflict
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Reschedule an appointment
      tags:
      - appointments
  /appointments/date-range:
    get:
      consumes:
      - application/json
      description: Retrieves appointments within a specified date range
      parameters:
      - description: Start date (YYYY-MM-DD)
        format: date
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        format: date
        in: query
        name: end_date
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page_number
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of appointments
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/appointmentQuery.AppointmentResponse'
                  type: array
                metadata:
                  $ref: '#/definitions/appointmentController.PaginationMetadata'
              type: object
        "400":
          description: Invalid date range or pagination parameters
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get appointments by date range
      tags:
      - appointments-query
  /appointments/owner/{ownerId}:
    get:
      consumes:
      - application/json
      description: Retrieves all appointments for a specific pet owner
      parameters:
      - description: Owner ID
        in: path
        name: ownerId
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page_number
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of appointments
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/appointmentQuery.AppointmentResponse'
                  type: array
                metadata:
                  $ref: '#/definitions/appointmentController.PaginationMetadata'
              type: object
        "400":
          description: Invalid owner ID or pagination parameters
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Owner not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get appointments by owner
      tags:
      - appointments-query
  /appointments/pet/{petId}:
    get:
      consumes:
      - application/json
      description: Retrieves all appointments for a specific pet
      parameters:
      - description: Pet ID
        in: path
        name: petId
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page_number
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of appointments
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/appointmentQuery.AppointmentResponse'
                  type: array
                metadata:
                  $ref: '#/definitions/appointmentController.PaginationMetadata'
              type: object
        "400":
          description: Invalid pet ID or pagination parameters
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Pet not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get appointments by pet
      tags:
      - appointments-query
  /appointments/stats:
    get:
      consumes:
      - application/json
      description: Retrieves statistical information about appointments
      produces:
      - application/json
      responses:
        "200":
          description: Appointment statistics
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get appointment statistics
      tags:
      - appointments-query
  /appointments/vet/{vetId}:
    get:
      consumes:
      - application/json
      description: Retrieves all appointments assigned to a specific veterinarian
      parameters:
      - description: Veterinarian ID
        in: path
        name: vetId
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page_number
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of appointments
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/appointmentQuery.AppointmentResponse'
                  type: array
                metadata:
                  $ref: '#/definitions/appointmentController.PaginationMetadata'
              type: object
        "400":
          description: Invalid veterinarian ID or pagination parameters
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Veterinarian not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get appointments by veterinarian
      tags:
      - appointments-query
  /owner/appointments:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all appointments for the authenticated owner
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get owner's appointments
      tags:
      - owner-appointments
    post:
      consumes:
      - application/json
      description: Owner creates a new appointment request for their pet
      parameters:
      - description: Appointment details
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/appointmentCmd.CreateAppointmentCommand'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Request a new appointment
      tags:
      - owner-appointments
  /owner/appointments/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves details of a specific appointment for the authenticated
        owner
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get specific appointment details
      tags:
      - owner-appointments
  /owner/appointments/{id}/cancel:
    put:
      consumes:
      - application/json
      description: Owner cancels their existing appointment
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Cancel an appointment
      tags:
      - owner-appointments
  /owner/appointments/{id}/reschedule:
    put:
      consumes:
      - application/json
      description: Owner reschedules their existing appointment
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: New appointment time
        in: body
        name: reschedule
        required: true
        schema:
          $ref: '#/definitions/appointmentCmd.RescheduleAppointmentCommand'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Reschedule an appointment
      tags:
      - owner-appointments
  /owner/appointments/pet/{petId}:
    get:
      consumes:
      - application/json
      description: Retrieves all appointments for a specific pet owned by the authenticated
        owner
      parameters:
      - description: Pet ID
        in: path
        name: petId
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get appointments for a specific pet
      tags:
      - owner-appointments
  /owner/appointments/upcoming:
    get:
      consumes:
      - application/json
      description: Retrieves upcoming appointments for the authenticated owner within
        a date range
      parameters:
      - description: Start date (YYYY-MM-DD)
        format: date
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        format: date
        in: query
        name: end_date
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get upcoming appointments
      tags:
      - owner-appointments
  /pets:
    get:
      description: Retrieves a list of all pet records.
      produces:
      - application/json
      responses:
        "200":
          description: List of pets
          schema:
            items:
              $ref: '#/definitions/petController.PetResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: List all pets
      tags:
      - Pet Management
    post:
      consumes:
      - application/json
      description: Creates a new pet record with the provided data.
      parameters:
      - description: Pet creation request
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/petController.PetInsertRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Pet created successfully
          schema:
            $ref: '#/definitions/petController.PetResponse'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Create a new pet
      tags:
      - Pet Management
  /pets/{id}:
    delete:
      description: Marks a pet record as inactive without permanently deleting it.
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid URL parameter
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Pet not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Soft delete a pet
      tags:
      - Pet Management
    get:
      description: Retrieves a single pet record by its unique ID.
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Pet found
          schema:
            $ref: '#/definitions/petController.PetResponse'
        "400":
          description: Invalid URL parameter
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Pet not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get a pet by ID
      tags:
      - Pet Management
    put:
      consumes:
      - application/json
      description: Updates a pet record by its ID with the provided data.
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: integer
      - description: Pet update request
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/petController.PetInsertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Pet updated successfully
          schema:
            $ref: '#/definitions/petController.PetResponse'
        "400":
          description: Invalid URL parameter or request body
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Pet not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Update an existing pet
      tags:
      - Pet Management
  /ping:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /v1/admin/users/{id}:
    delete:
      description: Soft deletes a user record by marking it as deleted.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: User soft deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid URL parameter
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Soft delete a user
      tags:
      - admin
  /v1/admin/users/{id}/ban:
    post:
      description: Bans a user by setting their status to 'banned'.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: User banned successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid URL parameter
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Ban a user
      tags:
      - admin
  /v1/admin/users/{id}/unban:
    post:
      description: Unbans a user by setting their status to 'active'.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: User unbanned successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid URL parameter
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Unban a user
      tags:
      - admin
  /v1/users:
    post:
      consumes:
      - application/json
      description: Creates a new user record with the provided data.
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userDtos.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                id:
                  type: integer
                message:
                  type: string
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Create a new user
      tags:
      - users
  /v1/users/{id}:
    get:
      description: Retrieves a single user record by their unique ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid URL parameter
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get a user by ID
      tags:
      - users
  /vet/appointments:
    get:
      consumes:
      - application/json
      description: Retrieves all appointments assigned to the authenticated veterinarian
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of appointments
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "400":
          description: Invalid pagination parameters
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "401":
          description: Unauthorized - Veterinarian not authenticated
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      security:
      - BearerAuth: []
      summary: Get veterinarian's appointments
      tags:
      - vet-appointments
  /vet/appointments/{id}:
    delete:
      consumes:
      - application/json
      description: Cancels an appointment by the authenticated veterinarian
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Cancel an appointment
      tags:
      - vet-appointments
  /vet/appointments/{id}/complete:
    put:
      consumes:
      - application/json
      description: Marks an appointment as completed by the authenticated veterinarian
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Complete an appointment
      tags:
      - vet-appointments
  /vet/appointments/{id}/confirm:
    put:
      consumes:
      - application/json
      description: Confirms a pending appointment by the authenticated veterinarian
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Appointment confirmed successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Invalid appointment ID
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "401":
          description: Unauthorized - Veterinarian not authenticated
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "403":
          description: Forbidden - Not assigned to this appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Cannot confirm appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      security:
      - BearerAuth: []
      summary: Confirm an appointment
      tags:
      - vet-appointments
  /vet/appointments/{id}/no-show:
    put:
      consumes:
      - application/json
      description: Marks an appointment as no-show when the client doesn't attend
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Appointment marked as no-show
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Invalid appointment ID
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "401":
          description: Unauthorized - Veterinarian not authenticated
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "403":
          description: Forbidden - Not assigned to this appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Cannot mark as no-show
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      security:
      - BearerAuth: []
      summary: Mark appointment as no-show
      tags:
      - vet-appointments
  /vet/appointments/{id}/reschedule:
    put:
      consumes:
      - application/json
      description: Allows a veterinarian to reschedule their assigned appointment
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: New appointment time details
        in: body
        name: reschedule
        required: true
        schema:
          $ref: '#/definitions/appointmentCmd.RescheduleAppointmentCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Appointment rescheduled successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "401":
          description: Unauthorized - Veterinarian not authenticated
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "403":
          description: Forbidden - Not assigned to this appointment
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "422":
          description: Invalid time slot or scheduling conflict
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      security:
      - BearerAuth: []
      summary: Reschedule an appointment
      tags:
      - vet-appointments
  /vet/appointments/stats:
    get:
      consumes:
      - application/json
      description: Retrieves statistical information about appointments for the authenticated
        veterinarian
      parameters:
      - description: Start date (YYYY-MM-DD)
        format: date
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        format: date
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Appointment statistics
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "400":
          description: Invalid date parameters
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "401":
          description: Unauthorized - Veterinarian not authenticated
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      security:
      - BearerAuth: []
      summary: Get appointment statistics
      tags:
      - vet-appointments
  /vet/appointments/today:
    get:
      consumes:
      - application/json
      description: Retrieves all appointments scheduled for today for the authenticated
        veterinarian
      produces:
      - application/json
      responses:
        "200":
          description: Today's appointments
          schema:
            allOf:
            - $ref: '#/definitions/apiResponse.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/appointmentQuery.AppointmentResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized - Veterinarian not authenticated
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      security:
      - BearerAuth: []
      summary: Get today's appointments
      tags:
      - vet-appointments
  /veterinarians:
    get:
      description: Retrieves a list of all veterinarians with optional filtering and
        pagination.
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Filter by specialty
        in: query
        name: specialty
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of veterinarians
          schema:
            items:
              $ref: '#/definitions/vetDtos.VetResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: List all veterinarians
      tags:
      - Veterinarians
    post:
      consumes:
      - application/json
      description: Creates a new veterinarian with the provided details.
      parameters:
      - description: Veterinarian data
        in: body
        name: vetCreate
        required: true
        schema:
          $ref: '#/definitions/vetDtos.VetCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Veterinarian created
          schema:
            $ref: '#/definitions/vetDtos.VetResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Create a new veterinarian
      tags:
      - Veterinarians
  /veterinarians/{id}:
    delete:
      description: Deletes a veterinarian from the system by ID.
      parameters:
      - description: Veterinarian ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Veterinarian not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Delete a veterinarian
      tags:
      - Veterinarians
    get:
      description: Retrieves a single veterinarian by their unique ID.
      parameters:
      - description: Veterinarian ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Veterinarian details
          schema:
            $ref: '#/definitions/vetDtos.VetResponse'
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Veterinarian not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Get a veterinarian by ID
      tags:
      - Veterinarians
    patch:
      consumes:
      - application/json
      description: Updates the details of an existing veterinarian by ID.
      parameters:
      - description: Veterinarian ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated veterinarian data
        in: body
        name: vetUpdate
        required: true
        schema:
          $ref: '#/definitions/vetDtos.VetUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Veterinarian updated
          schema:
            $ref: '#/definitions/vetDtos.VetResponse'
        "400":
          description: Invalid request data or ID
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "404":
          description: Veterinarian not found
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiResponse.APIResponse'
      summary: Update an existing veterinarian
      tags:
      - Veterinarians
swagger: "2.0"
